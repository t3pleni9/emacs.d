#+TITLE: Emacs Configurations
#+AUTHOR: Justin Jose

* Config
A nifty [[https://orgmode.org/worg/org-contrib/babel/][org-babel]] Emacs configuration.

** Require
One require to rule them all
#+begin_src emacs-lisp
(require 'org)
(require 'projectile)
(require 'neotree)
(require 'all-the-icons)
(require 'multiple-cursors)
(require 'virtualenvwrapper)
(require 'helm-projectile)
(require 'json-mode)
(require 'emms-setup)
(require 'async nil :noerror)
(require 'org-ref)
(require 'org-ref-pdf)
(require 'org-ref-url-utils)
(require 'org-ref-arxiv)
(require 'org-bullets)
(require 'smart-mode-line)
(require 'dumb-jump)
(require 'outline)
(require 'calfw-org)
(require 'iedit)
(require 'rust-mode)
(require 'org-super-agenda)
(require 'emacs-totp)
#+end_src

** Emacs startup, theme, and others
*** Global
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;; outline-hide the startup messag
  (load-theme 'darktooth t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (elpy-enable)
  (epa-file-enable)

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
  (sml/setup)
  (setq sml/no-confirm-load-theme t)
#+end_src

Disable Backup
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

Make life a little bit more easier
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq echo-keystrokes 0.1)
#+end_src

Full screen, and server
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
(server-mode t)
#+end_src

Garbage Collection
#+begin_src emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+end_src

Danger Scripts
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

Make shell not to repeat commands
#+begin_src emacs-lisp
(setq comint-process-echoes t)
#+end_src

*** Date and Time 
Have time displayed in status bar
#+begin_src emacs-lisp
(setq display-time-string-forms
       '((propertize (concat dayname " " day  " "  monthname " " 12-hours ":" minutes " "  am-pm)
 		    'face 'bold)))

#+end_src

*** Display battery
#+begin_src emacs-lisp
    (require 'battery)
    (defun my/battery-mode-line () (let* ((bat (read (cdr (assoc 112 (funcall battery-status-function)))))
        (index (cl-position-if (lambda(e) (> bat e)) '(85 75 50 35 15 7 2 -1)))
        (charging (if (string-match-p "charging" (format "%s" (funcall battery-status-function))) "⚡" ""))
        (symbol (nth index '("[+++]" "[++-]" "[++ ]" "[+- ]" "[+  ]" "[-  ]" "[!  ]" "[.  ]")))
        (color (nth index (mapcar (lambda(c) (apply 'color-rgb-to-hex c)) (color-gradient '(0.3 1 0.2) '(1 0.2 0.1) 8)))))
      (propertize (concat symbol charging " " (number-to-string bat) "%% ") 'face (list :foreground color :weight 'bold))))
#+end_src

*** Python
Setup python venv with conda
#+begin_src emacs-lisp

(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support
(setq venv-location "~/.miniconda/envs")
(setenv "WORKON_HOME" "~/.miniconda/envs")

#+end_src

** Global Modes
*** Global 

#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
(global-auto-complete-mode t)
(auto-save-visited-mode t)
(global-visual-line-mode t)
(sml-modeline-mode t)
(helm-mode 1)
(pyvenv-mode 1)
(global-undo-tree-mode)
(electric-pair-mode t)
(rainbow-delimiters-mode 1)
(show-paren-mode 1)
(setq show-paren-delay 0)
(wrap-region-global-mode 1)
(delete-selection-mode 1)
(org-super-agenda-mode 1)

(customize-set-variable 'helm-ff-lynx-style-map t)

(setq-default display-line-numbers-width 2
              display-line-numbers-widen t)

(setq tab-width 2
      indent-tabs-mode nil)
   
(display-time-mode 1)
#+end_src

Disable line numbers in some buffers
#+begin_src emacs-lisp
(defun display-line-numbers-disable-hook ()
  "Disable display-line-numbers locally."
  (display-line-numbers-mode 0))

(add-hook 'neotree-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'maggit-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'org-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'vterm-mode-hook 'display-line-numbers-disable-hook)

#+end_src


Disable visual line mode in some buffers
#+begin_src emacs-lisp

(defun disable-visual-line-mode ()
  "Disable display-line-numbers locally."
   (visual-line-mode -1))

(add-hook 'neotree-mode-hook 'disable-visual-line-mode)
(add-hook 'minibuffer-setup-hook 'disable-visual-line-mode)

#+end_src

Org export support
#+begin_src emacs-lisp
(setq doc-view-ghostscript-program "/usr/local/bin/gs")
#+end_src

NeoTree with display icons
#+begin_src emacs-lisp
(setq neo-theme (if (display-graphic-p) 'icons))
#+end_src
*** Prog-Mode hooks
Programming Mode Hooks
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook #'yafolding-mode)
(add-hook 'json-mode-hook #'yafolding-mode)
(add-hook 'prog-mode-hook #'outline-minor-mode)
(add-hook 'nxml-mode-hook #'outline-minor-mode)
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

#+end_src

*** Projectile
Enable Projectile Globally
#+begin_src emacs-lisp
(projectile-global-mode)
(helm-projectile-toggle 1)
(setq projectile-enable-caching t)
#+end_src

Projectile default search path and indexing
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Documents/Projects/"))
(setq projectile-indexing-method 'native)
#+end_src

Bind switch project to =helm-projectile=
#+begin_src emacs-lisp
(setq projectile-switch-project-action 'helm-projectile)
#+end_src

*** Shell
Setup shell setting to work with zsh
#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)
(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)

#+end_src

*** Flycheck
#+begin_src emacs-lisp
(when (require 'flycheck nil t)
  (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
  (add-hook 'elpy-mode-hook 'flycheck-mode))
#+end_src

Use aspell to fix my mistakes
#+begin_src emacs-lisp
(setq flyspell-issue-welcome-flag nil)
(if (eq system-type 'darwin)
    (setq-default ispell-program-name "/usr/local/bin/aspell")
  (setq-default ispell-program-name "/usr/bin/aspell"))
(setq-default ispell-list-command "list")

#+end_src

*** Markdown
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
(add-hook 'markdown-mode-hook
          (lambda ()
            (visual-line-mode t)
            (writegood-mode t)
            (flyspell-mode t)))

#+end_src

*** Org
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("^\\*.org\\*$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'writegood-mode)
  (add-hook 'org-mode-hook 'org-password-manager-key-bindings)
  (add-hook 'org-mode-hook 'org-beamer-mode)
#+end_src

*** Dumb Jump
Dumb jump lets me goto definitions easily using a dumb =ag= search
#+begin_src emacs-lisp
(dumb-jump-mode 1)
(setq dumb-jump-selector 'helm)
#+end_src

** Hydra
*** GIT
#+begin_src emacs-lisp
(defhydra hydra-magit (:color blue)
  "
  ^
  ^Git  ^             ^Do^
  ^─────^─────────────^──^─────────────
  _n_ Next Hunk       _p_ Previous Hunk
  _w_ Show Hunk       _t_ Stage Hunk
  _q_ Quit            _b_ Blame
  _c_ Clone           _s_ Status
  _i_ Init            ^^
  "
  ("q" nil)
  ("n" git-gutter+-next-hunk)
  ("p" git-gutter+-previous-hunk)
  ("w" git-gutter+-show-hunk)
  ("t" git-gutter+-stage-hunks)
  ("b" magit-blame)
  ("c" magit-clone)
  ("i" magit-init)
  ("s" magit-status))
#+end_src

*** Projectile
#+begin_src emacs-lisp
(defhydra hydra-projectile (:color blue)
  "
^
^Projectile^        ^Buffers^           ^Find^              ^Search^
^──────────^────────^───────^───────────^────^──────────────^──────^────────────
_q_ quit            _b_ list            _d_ directory       _r_ replace
_i_ reset cache     _K_ kill all        _D_ root            _R_ regexp replace
^^                  _S_ save all        _f_ file            _s_ ag
^^                  ^^                  _p_ project         ^^
^^                  ^^                  ^^                  ^^
"
  ("q" nil)
  ("b" helm-projectile-switch-to-buffer)
  ("d" helm-projectile-find-dir)
  ("D" projectile-dired)
  ("f" helm-projectile)
  ("i" projectile-invalidate-cache :color red)
  ("K" projectile-kill-buffers)
  ("p" helm-projectile-switch-project)
  ("r" projectile-replace)
  ("R" projectile-replace-regexp)
  ("s" helm-projectile-ag)
  ("S" projectile-save-project-buffers))
#+end_src

*** Helm
#+begin_src emacs-lisp
(defhydra hydra-helm (:color blue)
  "
^
^Helm^              ^Browse^
^────^──────────────^──────^────────────
_q_ quit            _a_ Arxiv Search
_r_ resume          _g_ google
^^                  _i_ imenu
^^                  _k_ kill-ring
^^                  ^^
"
  ("q" nil)
  ("g" helm-google-suggest)
  ("a" arxiv-lookup)
  ("i" helm-imenu)
  ("k" helm-show-kill-ring)
  ("r" helm-resume))

#+end_src

*** Org
Org-ref Sugars
#+begin_src emacs-lisp
(defhydra hydra-org-ref (:color blue)
  "
  ^
  ^Org-ref  ^             ^Do^
  ^─────^─────────────-^──^─────────────
  _l_ Create label     _i_ Insert Reference
  _b_ Add doi bibtex   _y_ Bibtex Yank          
  _a_ Add arxiv bibtex ^^
  _q_ Quit            
  "
  ("q" nil)
  ("l" org-ref-helm-insert-label-link) 
  ("i" org-ref-helm-insert-ref-link)
  ("b" doi-add-bibtex-entry)
  ("a" arxiv-add-bibtex-entry)
  ("y" org-bibtex-yank))
#+end_src
*** Spotify
Spotify sugars
#+begin_src emacs-lisp
(defhydra hydra-spotify (:color blue)
  "
  ^
  ^Spotify  ^             ^Do^
  ^────────^──────────────^──^─────────────
  _p_ Play/Pause          _N_ Next
  _s_ Stop                _P_ Previous
  _q_ Quit            
  "
  ("q" nil)
  ("p" spotify-playpause)
  ("N" spotify-next)
  ("P" spotify-previous)
  ("s" spotify-quit))
#+end_src

*** Outline
Outline and Code folding
#+begin_src emacs-lisp
  (defhydra hydra-outline (:color blue)
    "
    ^
    ^Outline  ^           ^Hide ^                ^Show ^               ^Move ^
    ^─────────^───────────^─────^────────────────^─────^───────────────^─────^─────────────────────
    _q_ Quit              _g_ Hide Sublevels     _a_ Show All          _u_ Up Heading                
                        _t_ Hide Body          _e_ Show Entry        _n_ Next Visible Heading     
                        _o_ Hide Other         _i_ Show Children     _p_ Previous Visible Heading 
                        _c_ Hide Entry         _k_ Show Branches     _f_ Forward Same Level       
                        _l_ Hide Leaves        _s_ Show Subtree      _b_ Backward Same Level       
                        _d_ Hide Subtree      
    "
  ("q" nil)
  ;; HIDE
  ("g" outline-hide-sublevels)   
  ("t" outline-hide-body)        
  ("o" outline-hide-other)       
  ("c" outline-hide-entry)       
  ("l" outline-hide-leaves)      
  ("d" outline-hide-subtree)     
  ;; SHOW
  ("a" outline-show-all)         
  ("e" outline-show-entry)       
  ("i" outline-show-children)    
  ("k" outline-show-branches)    
  ("s" outline-show-subtree)     
  ;; MOVE
  ("u" outline-up-heading)               
  ("n" outline-next-visible-heading)     
  ("p" outline-previous-visible-heading) 
  ("f" outline-forward-same-level)       
  ("b" outline-backward-same-level))      
#+end_src

** Org
*** Global
TODO Cycles
#+begin_src emacs-lisp
(setq org-todo-keywords
(quote ((sequence "TODO(t)" "QUEUED(q)" "INPROGRESS(i)"  "|" "DONE(d!)" "CANCELLED(c)" )
(sequence "FILE-CLAIM(f)" "|" )
(sequence "READ(r)" "WATCH(w)" "|" )
(sequence "BUY(b)" "VISIT(v)" "TRY(T)"  "|")
(sequence "RE-VISIT(V)" "RE-CONSIDER (C)" "|")
(sequence "POSTPONED(p)" "|")
)))

(setq org-todo-keyword-faces '(
("TODO" . (:foreground "#ff39a3" :weight bold))
("TRY" . (:foreground "#ff39a3" :weight bold))
("READ" . (:foreground "#ff39a3" :weight bold))
("BUY" . (:foreground "#ff39a3" :weight bold))
("FILE-CLAIM" . (:foreground "#ff39a3" :weight bold))
("WATCH" . (:foreground "#ffdd00" :weight bold))
("VISIT" . (:foreground "#ff39a3" :weight bold))
("QUEUED" . (:foreground "#ff9a00" :weight bold))
("INPROGRESS" . (:foreground "#ffdd00" :weight bold))
("CANCELLED" . (:foreground "white" :background "#4d4d4d" :weight bold))
("RE-CONSIDER" . (:foreground "#88ddee" :background "#454545" :weight bold))
("RE-VISIT" . (:foreground "#88ddee" :background "#454545" :weight bold))
("POSTPONED" . "#008080")))
#+end_src

Time tracking on tasks
#+begin_src emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+end_src

Image Scaling 
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src

*** PDF view
Install PDF tools 
#+begin_src emacs-lisp
(pdf-tools-install)
#+end_src

Always open PDF inside EMACS itself
#+begin_src emacs-lisp
(eval-after-load 'org '(require 'org-pdfview))

(add-to-list 'org-file-apps 
             '("\\.pdf\\'" . (lambda (file link)
                                     (org-pdfview-open link))))
#+end_src

Fine grained zoom with + and - to 10% 
#+begin_src emacs-lisp
(setq pdf-view-resize-factor 1.1)
#+end_src

Dark Mode always
#+begin_src emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
(setq-default pdf-view-display-size 'fit-page)
#+end_src

*** Org-agenda
#+begin_src emacs-lisp
  (require 'org-agenda)

  (setq org-agenda-prefix-format '(
    ;;(agenda  . " %i %-12:c%?-12t% s") ;; file name + org-agenda-entry-type
    (agenda  . "  • %?-12t% s")
    (timeline  . "  % s")
    (todo  . " %i %-12:c")
    (tags  . " %i %-12:c")
    (search . " %i %-12:c")))
#+end_src

*** Files
List of global org files
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org-notes")
(setq secrets-file-path "~/Documents/Personal/secrets.org.gpg")
(setq references-file-path "~/Documents/org-notes/bibliography/references.org")
(setq bookmarks-file-path "~/Documents/org-notes/exocortex/capture.org")
(setq journal-file-path "~/Documents/org-notes/exocortex/journal.org")
(setq tasks-file-path "~/Documents/org-notes/exocortex/inbox.org")
(setq home-tasks-file-path "~/Dropbox/org-notes/home/tasks.org")
(setq secrets-file (cons 'file secrets-file-path))
(set-register ?s secrets-file)
(set-register ?r (cons 'file references-file-path))
(set-register ?b (cons 'file bookmarks-file-path))
(set-register ?j (cons 'file journal-file-path))

(setq org-agenda-files '("~/Documents/org-notes/exocortex/inbox.org"
"~/Documents/org-notes/exocortex/projects.org"
"~/Documents/org-notes/exocortex/capture.org"
"~/Documents/org-notes/exocortex/journal.org"
"~/Documents/org-notes/bibliography/references.org"
"~/Dropbox/org-notes/home/tasks.org"))
(setq org-default-notes-file (concat org-directory "/exocortex/capture.org"))
(setq org-agenda-file-regexp "\\`[^.].*\\.org'\\|[0-9]+$")
(add-hook 'diary-display-hook 'diary-fancy-display)

(setq org-refile-targets '(("~/Documents/org-notes/exocortex/projects.org" :maxlevel . 3)
                           ("~/Dropbox/org-notes/home/tasks.org" :maxlevel . 2)
                           ("~/Documents/org-notes/exocortex/inbox.org" :level . 1)
                           ("~/Documents/org-notes/exocortex/capture.org" :maxlevel . 1)))


#+end_src

*** Path setting
#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin"))
#+end_src

*** Org Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)))

(defun my-org-confirm-babel-evaluate (lang body)
  (not (member lang '("python" "lisp" "emacs-lisp" "clojure" "sh"))))

(setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

#+end_src

*** Org latex
#+begin_src emacs-lisp
(setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))

(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
(add-to-list 'org-latex-default-packages-alist
	     '("linktocpage,pdfstartview=FitH,colorlinks,
linkcolor=blue,anchorcolor=blue,
citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
	       "hyperref" nil)
	     t)
(setq org-latex-prefer-user-labels t)
#+end_src
*** Org ref
Search through bibtex reference using helm reference
#+begin_src emacs-lisp
(defun my/helm-bibtex-publications (&optional arg)
  "Search BibTeX entries authored by “Jane Doe”.

With a prefix ARG, the cache is invalidated and the bibliography reread."
  (interactive "P")
  (helm-bibtex arg nil ""))

#+end_src

Manage notes using helm bibtex
#+begin_src emacs-lisp
;; Tell org-ref to let helm-bibtex find notes for it
(setq org-ref-notes-function
      (lambda (thekey)
	(let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
	  (bibtex-completion-edit-notes
	   (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
#+end_src

Org-ref Files
#+begin_src emacs-lisp
(setq reftex-default-bibliography '("~/Documents/org-notes/bibliography/references.bib")
      org-ref-default-bibliography '("~/Documents/org-notes/bibliography/references.bib")
      org-ref-pdf-directory "~/Documents/org-notes/bibliography/bibtex-pdfs/")

#+end_src
**** Bibtex
#+begin_src emacs-lisp
(setq bibtex-completion-bibliography "~/Documents/org-notes/bibliography/references.bib"
      bibtex-completion-library-path "~/Documents/org-notes/bibliography/bibtex-pdfs"
      bibtex-completion-notes-path "~/Documents/org-notes/bibliography/helm-bibtex-notes"
      bibtex-completion-pdf-field "File"
      bibtex-completion-pdf-symbol "⌘"
      bibtex-completion-notes-symbol "✎"
      bibtex-completion-additional-search-fields '(tags keywords))
(setq bibtex-completion-display-formats
      '((t . "${author:30} ${title:150} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:7}")))
#+end_src
*** Org-journal
Org-Journal settings
#+begin_src emacs-lisp
  (setq org-journal-dir "~/Documents/Personal/.journal/")
  (setq org-journal-file-format "%Y%m%d")
  (setq org-journal-file-type 'yearly)
  (setq org-journal-carryover-items "nil")
  (require 'org-journal)
  (org-reload)
#+end_src

*** Capture Templates

#+begin_src emacs-lisp
(setq org-capture-templates
      '(
	("s" "Secrets" entry
	 (file+headline secrets-file-path "Secrets")
	 "* [[%^{Link}][%^{Description}]]
 :PROPERTIES:
 :USERNAME: %^{Username}
 :PASSWORD: %^{Password}
 :END:
")
("t" "Todos")
("tt" "Task [inbox]" entry
	 (file+headline tasks-file-path "Tasks")
	 "* TODO %i%?")

("tc" "Course [inbox]" entry
	 (file+headline tasks-file-path "Courses")
	 "* TODO %i%?")

("ts" "Shopping list [home]" checkitem
	 (file+headline home-tasks-file-path "Shopping")
	 "- [ ] %i%? ")

("tr" "Reminder [home]" entry
	 (file+headline home-tasks-file-path "Non-Recurring")
	 "* TODO %i%?")

("r" "Paper" entry
(file+headline references-file-path "Papers")
	 "*  %^g %i%?
     :PROPERTIES:
     :TYPE: Paper
     :END:
")
("j" "Journal" entry
(file+datetree journal-file-path)
   "* %?")

("b" "Bookmarks")
	("bb" "Book" entry
	 (file+headline bookmarks-file-path "Books")
	   "* %^{title}  %^g
       :PROPERTIES:
       :TYPE: Book
       :URL: [[%^{url}][source]]
       :END:
")
	("bw" "Web URL" entry
	 (file+headline bookmarks-file-path "Web")
	   "* %^{title}  %^g
       :PROPERTIES:
       :TYPE: Web
       :URL: [[%^{url}][source]]
       :END:
")

	("bv" "Videos" entry
	 (file+headline bookmarks-file-path "Videos")
	   "* %^{title}  %^g
       :PROPERTIES:
       :TYPE: Video
       :URL: [[%^{url}][source]]
       :END:
")

	("bp" "Podcasts" entry
	 (file+headline bookmarks-file-path "Podcasts")
	   "* %^{title} %^g
       :PROPERTIES:
       :TYPE: Podcast
       :URL: [[%^{url}][source]]
       :END:
")

("bc" "Courses" entry
	 (file+headline bookmarks-file-path "Courses")
	   "* TODO %^{title} %^g
       :PROPERTIES:
       :TYPE: Course
       :URL: [[%^{url}][source]]
       :END:
")))
#+end_src

** Elfeed
Feed reader setups
*** Configuration 
[[file:elfeed.org][Configuration Org]]
#+begin_src emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+end_src
*** Bookmarks
All the bookmark loaders
#+begin_src emacs-lisp
(defun my/elfeed-outline-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))

(defun my/elfeed-outline-show-AI-ML ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-ai_ml"))

(defun my/elfeed-outline-show-daily ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-daily"))

(defun my/elfeed-outline-show-reddit ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-reddit"))

(defun my/elfeed-outline-show-astro ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-astro"))

(defun my/elfeed-outline-show-podcast ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-podcast"))
#+end_src
*** EMMS
Should have its own header, but as of now just lives inside the elfeed section
#+begin_src emacs-lisp
(emms-all)
(emms-default-players)
(define-emms-simple-player afplay '(file)
      (regexp-opt '(".mp3" ".m4a" ".aac" ".ogg" ".wav" ".pls"))
      "afplay")
    (setq emms-player-list `(,emms-player-afplay))
#+end_src

Download an enclosure and play
#+begin_src emacs-lisp
(defun my/download-enclosure-and-play (url)
  "Download asynchronously the enclosure from URL to PATH."
  (emms-stop)
  (let  ((url-enclosure url))
        (async-start
         `(lambda ()
           ,(url-copy-file url-enclosure "/tmp/audio.mp3" t))
         `(lambda (_)
	   ,(emms-play-file "/tmp/audio.mp3")))))

(defun my/replay-previous ()
  (interactive)
  (emms-play-file "/tmp/audio.mp3"))

(defun my/elfeed-outline-show-play-enclosure ()
  "Play enclosure number ENCLOSURE-INDEX from current entry using EMMS.
Prompts for ENCLOSURE-INDEX when called interactively."
  (interactive)
  (elfeed-search-untag-all-unread)
  (let ((entry (elfeed-search-selected :single)))
  (setq url-enclosure (car (elt (elfeed-entry-enclosures entry) 0))))
  (my/download-enclosure-and-play url-enclosure))

#+end_src

*** Customization
Custom functions to make life a little easier
**** Save state before Quit
#+begin_src emacs-lisp
;;write to disk when quiting
(defun my/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))
#+end_src
**** Mark the favourites
#+begin_src emacs-lisp
(defalias 'elfeed-toggle-star
  (elfeed-expose #'elfeed-search-toggle-all 'star))
#+end_src
**** Custom Colors
***** News
#+begin_src emacs-lisp
(defface daily-news
  '((t :foreground "#AFF"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(daily daily-news) elfeed-search-face-alist)
#+end_src
***** Podcasts
#+begin_src emacs-lisp
(defface elfeed-audio
  '((t :foreground "#FA0"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(podcast elfeed-audio) elfeed-search-face-alist)
#+end_src
***** Reddit
#+begin_src emacs-lisp
(defface elfeed-reddit
  '((t :foreground "#0FA"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(reddit elfeed-reddit) elfeed-search-face-alist)
#+end_src
***** Stars
#+begin_src emacs-lisp
  ;; face for starred articles
  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"))
    "Marks a starred Elfeed entry."
    :group 'elfeed)

  (push '(star elfeed-search-starred-title-face) elfeed-search-face-alist)
    #+end_src
    
**** Titles, See more titles and Let the computer read out the title ( Mac only)
#+begin_src emacs-lisp
(defun my/outline-show-full-title ()
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (message "%s" (propertize (elfeed-entry-title entry)))
))

(defun say (message)
  (call-process "say" nil nil nil message))

(defun my/elfeed-say ()
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (say (elfeed-entry-title entry))))

#+end_src

** Custom Configurations and Functions
*** Projectile/NeoTree
Open NeoTree using the git root.
#+begin_src emacs-lisp
(defun neotree-project-dir ()

    (interactive)
    (let ((project-dir (projectile-project-root))
          (file-name (buffer-file-name)))
      (neotree-toggle)
      (if project-dir
          (if (neo-global--window-exists-p)
              (progn
                (neotree-dir project-dir)
                (neotree-find file-name)))
        (message "Could not find git project root."))))

#+end_src

NeoTree copy full path at cursor
#+begin_src emacs-lisp
(defun my/neo-copy-path () (interactive) (kill-new (neo-buffer--get-filename-current-line)))
#+end_src
*** Git
Magit and git-gutter configurations
#+begin_src emacs-lisp
(global-git-gutter+-mode t)
(setq git-gutter+-disabled-modes '(asm-mode image-mode))
(set-face-background 'git-gutter+-modified "purple") ;; background color
(set-face-foreground 'git-gutter+-added "green")
(set-face-foreground 'git-gutter+-deleted "red")
#+end_src

*** Kill buffer
Kill buffer asks way too many questions on what to kill, and since I would want to kill what I am on 
#+begin_src emacs-lisp
(defun my/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
#+end_src
*** Windows and Frames
Have a easier navigation around open windows
#+begin_src emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))
#+end_src
*** Basic Text editing
Duplicate an entire line
#+begin_src emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
  (move-beginning-of-line 1)
  )
#+end_src
** Key Bindings
Define custom key bindings.
*** Windows and Frames
Basic key bindings to play around with frames and window. Binding Delete frame defaulted at  =C-x 5 0= to =C-x w=

#+begin_src emacs-lisp
(global-set-key (kbd "C-x w") 'delete-frame)
(global-set-key (kbd "C-x C-b") 'switch-to-buffer)
(global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "s->") #'other-window)
(global-set-key (kbd "s-<") #'prev-window)
#+end_src

**** Shell
Have a Doom styled console launch binding
#+begin_src emacs-lisp
(global-set-key (kbd "s-`") 'vterm)
#+end_src

*** Basic Text editing
Duplicate a line
#+begin_src emacs-lisp
(global-set-key (kbd "C-c d") 'duplicate-line)
#+end_src

Mark occurrences ( Rudimentary version of iedit)
#+begin_src emacs-lisp
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
#+end_src
*** GIT
Git key bindings, with added sugar of hydra
#+begin_src emacs-lisp
(global-set-key (kbd "C-c g") 'magit-status)
(global-set-key (kbd "C-c m") 'hydra-magit/body)
#+end_src

*** Projectile/NeoTree
#+begin_src emacs-lisp
(global-set-key (kbd "s-1") 'neotree-project-dir)
(global-set-key (kbd "C-c p") 'hydra-projectile/body)
(define-key neotree-mode-map (kbd "C-c M-p") 'my/neo-copy-path)
#+end_src

*** Kill buffer
Just kill the current buffer without asking too many questions
#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'my/kill-this-buffer)
#+end_src

*** Helm
Have helm handle most of the things around

#+begin_src emacs-lisp
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "C-c h") 'hydra-helm/body)
(global-set-key (kbd "C-x p") 'my/helm-bibtex-publications)
#+end_src

*** Org
References, Publications and Citations
#+begin_src emacs-lisp
(setq org-ref-insert-cite-key "C-c M-]")
#+end_src

Links agendas and capture templates
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

Org-ref hydra sugar
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'hydra-org-ref/body)
#+end_src

Org-brain
#+begin_src emacs-lisp
 (define-key org-mode-map (kbd "C-c b") 'org-brain-visualize)
#+end_src

PDF View
#+begin_src emacs-lisp
(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
(define-key org-mode-map (kbd "C-c i") 'interleave-mode)
#+end_src

*** Spotify
Spotify hydra sugar
#+begin_src emacs-lisp
(global-set-key (kbd "C-c s") 'hydra-spotify/body)
#+end_src

*** Elfeed
#+begin_src emacs-lisp
(global-set-key (kbd "C-c w") 'elfeed)
#+end_src

Elfeed bookmarks and custom keymaps

#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
              ("A" . my/elfeed-outline-show-all)
              ("M" . my/elfeed-outline-show-AI-ML)
              ("D" . my/elfeed-outline-show-daily)
              ("R" . my/elfeed-outline-show-reddit)
              ("P" . my/elfeed-outline-show-podcast)
              (">" . my/elfeed-outline-show-play-enclosure)
              (";" . emms-stop)
              (":" . my/replay-previous)
              ("x" . my/elfeed-say)
              ("*" . elfeed-toggle-star)
              ("<SPC>" . my/outline-show-full-title)))
#+end_src
*** Json
Pretty print JSON buffer
#+begin_src emacs-lisp
(define-key json-mode-map (kbd "C-M-/") 'json-pretty-print-buffer)
#+end_src
*** Outline
Rebind outline minor mode key bindings
#+begin_src emacs-lisp
 (define-key outline-minor-mode-map (kbd "C-c o") 'hydra-outline/body)
#+end_src
*** Python
Pytest keybinding in python mode
#+begin_src emacs-lisp
(define-key python-mode-map (kbd "C-c t") 'python-pytest-popup)
#+end_src

*** Password Manager
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c C-p C-g") 'password-generator-phonetic)
(define-key org-mode-map (kbd "C-c C-p C-p") 'org-get-pin)
#+end_src

