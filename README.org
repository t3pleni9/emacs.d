#+TITLE: Emacs Configurations
#+AUTHOR: Justin Jose

A nifty [[https://orgmode.org/worg/org-contrib/babel/][org-babel]] Emacs configuration.

* Require
One require to rule them all
#+begin_src emacs-lisp
  (require 'org)
  (require 'auto-complete)
  (require 'projectile)
  (require 'all-the-icons)
  (require 'multiple-cursors)
  (require 'virtualenvwrapper)
  (require 'helm)
  (require 'helm-projectile)
  (require 'helm-swoop)
  (require 'json-mode)
  (require 'emms-setup)
  (require 'scroll-bar)
  (require 'async nil :noerror)
  (require 'org-ref)
  (require 'org-ref-pdf)
  (require 'org-ref-url-utils)
  (require 'org-ref-arxiv)
  (require 'org-bullets)
  (require 'smart-mode-line)
  (require 'dumb-jump)
  (require 'calfw-org)
  (require 'iedit)
  (require 'rust-mode)
  (require 'org-super-agenda)
  (require 'emacs-totp)
  (require 'image+)
  (require 'dashboard)
  (require 'org-trello)
  (require 'twittering-mode)
  (require 'view)
  (require 'ein)
  (require 'ein-notebook)
#+end_src

* Emacs startup, theme, and others
** Path setting
#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin" ":/Users/in-justin.jose/.miniconda/bin" ":/Users/in-justin.jose/.local/bin"))
#+end_src

** Global
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;; outline-hide the startup messag
  (load-theme 'darktooth t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (elpy-enable)				
  (epa-file-enable)

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
  (sml/setup)
  (setq sml/no-confirm-load-theme t)
#+end_src

Disable Backup
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

Make life a little bit more easier
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq echo-keystrokes 0.1)
#+end_src

Full screen, and server
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
 (unless (daemonp) (server-mode t))
#+end_src

Garbage Collection
#+begin_src emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+end_src

Danger Scripts
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

Make shell not to repeat commands
#+begin_src emacs-lisp
(setq comint-process-echoes t)
#+end_src

Set the font to a comfortable level
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 130)
(setq-default line-spacing 1)
(set-frame-font "Hack 13" nil t)
#+end_src

#+RESULTS:

Don't kill emacs without confirming
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

** Dashboard
#+begin_src emacs-lisp
(dashboard-setup-startup-hook)
;; Set the title
(setq dashboard-banner-logo-title "Dashboard")

;; Set the banner
(setq dashboard-startup-banner "~/.emacs.d/external/t9-logo.png")
(setq dashboard-items '((recents  . 5)
                        (agenda . 10)
                        (projects . 5)
                        (bookmarks . 5)))
#+end_src

** Date and Time 
Have time displayed in status bar
#+begin_src emacs-lisp
(setq display-time-string-forms
       '((propertize (concat dayname " " day  " "  monthname " " 12-hours ":" minutes " "  am-pm)
 		    'face 'bold)))

#+end_src

** Display battery
#+begin_src emacs-lisp
    (require 'battery)
    (defun my/battery-mode-line () (let* ((bat (read (cdr (assoc 112 (funcall battery-status-function)))))
        (index (cl-position-if (lambda(e) (> bat e)) '(85 75 50 35 15 7 2 -1)))
        (charging (if (string-match-p "charging" (format "%s" (funcall battery-status-function))) "⚡" ""))
        (symbol (nth index '("[+++]" "[++-]" "[++ ]" "[+- ]" "[+  ]" "[-  ]" "[!  ]" "[.  ]")))
        (color (nth index (mapcar (lambda(c) (apply 'color-rgb-to-hex c)) (color-gradient '(0.3 1 0.2) '(1 0.2 0.1) 8)))))
      (propertize (concat symbol charging " " (number-to-string bat) "%% ") 'face (list :foreground color :weight 'bold))))
#+end_src

** Python
Setup python venv with conda
#+begin_src emacs-lisp

(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support
(setq venv-location "~/.miniconda/envs")
(setenv "WORKON_HOME" "~/.miniconda/envs")

#+end_src

** Jupyter Notebooks
Set jupyter executable path and Notebook path
#+begin_src emacs-lisp
(setq ein:jupyter-default-server-command "~/.local/bin/jupyter")
(setq ein:jupyter-default-notebook-directory "~/Documents/Notebook")
#+end_src

* Global Modes
** Global 

#+begin_src emacs-lisp
(global-display-line-numbers-mode t)
(auto-save-visited-mode t)
(global-visual-line-mode t)
(sml-modeline-mode t)
(helm-mode 1)
(pyvenv-mode 1)
(global-undo-tree-mode)
(electric-pair-mode t)
(rainbow-delimiters-mode 1)
(show-paren-mode 1)
(setq show-paren-delay 0)
(wrap-region-global-mode 1)
(delete-selection-mode 1)
(org-super-agenda-mode 1)
(customize-set-variable 'helm-ff-lynx-style-map t)

(setq-default display-line-numbers-width 2
              display-line-numbers-widen t)

(setq tab-width 2
      indent-tabs-mode nil)
   
(display-time-mode 1)
#+end_src

Disable line numbers in some buffers
#+begin_src emacs-lisp
(defun display-line-numbers-disable-hook ()
  "Disable display-line-numbers locally."
  (display-line-numbers-mode 0))

(add-hook 'maggit-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'org-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'vterm-mode-hook 'display-line-numbers-disable-hook)

#+end_src


Disable visual line mode in some buffers
#+begin_src emacs-lisp

(defun disable-visual-line-mode ()
  "Disable display-line-numbers locally."
   (visual-line-mode -1))

(add-hook 'minibuffer-setup-hook 'disable-visual-line-mode)

#+end_src

Org export support
#+begin_src emacs-lisp
(setq doc-view-ghostscript-program "/usr/local/bin/gs")
#+end_src

Image view mode
#+begin_src emacs-lisp
(eval-after-load 'image+ '(imagex-global-sticky-mode 1))
#+end_src

** EPUB mode setting
Basic setting
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(setq nov-text-width t)
(add-hook 'nov-mode-hook 'visual-line-mode)
(add-hook 'nov-mode-hook 'visual-fill-column-mode)
#+end_src


#+begin_src emacs-lisp
(require 'justify-kp)
(setq nov-text-width t)

(defun my-nov-window-configuration-change-hook ()
  (my-nov-post-html-render-hook)
  (remove-hook 'window-configuration-change-hook
               'my-nov-window-configuration-change-hook
               t))

(defun my-nov-post-html-render-hook ()
  (if (get-buffer-window)
      (let ((max-width (pj-line-width))
            buffer-read-only)
        (save-excursion
          (goto-char (point-min))
          (while (not (eobp))
            (when (not (looking-at "^[[:space:]]*$"))
              (goto-char (line-end-position))
              (when (> (shr-pixel-column) max-width)
                (goto-char (line-beginning-position))
                (pj-justify)))
            (forward-line 1))))
    (add-hook 'window-configuration-change-hook
              'my-nov-window-configuration-change-hook
              nil t)))

(add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)
#+end_src

** Prog-Mode hooks
Programming Mode Hooks
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
(add-hook 'prog-mode-hook #'yafolding-mode)
(add-hook 'json-mode-hook #'yafolding-mode)
(add-hook 'nxml-mode-hook #'yafolding-mode)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

#+end_src

*** JavaScript
JavaScript specific setups
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.jsx\\'" . js2-jsx-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
#+end_src

*** Python
Python Specific Setups
#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
(add-hook 'python-mode-hook (lambda () (auto-complete-mode -1)))
#+end_src

Setting iPython as the default REPL for python
#+begin_src emacs-lisp
(setq python-shell-interpreter "~/.miniconda/bin/ipython"
python-shell-interpreter-args "--simple-prompt -i")

(add-hook 'inferior-python-mode-hook 'no-trailing-whitespace)
(add-hook 'inferior-python-mode-hook
          '(lambda ()
             (setq-local ml-interactive? t)))
#+end_src

*** LISP
#+begin_src emacs-lisp
(setq inferior-lisp-program "clisp")
#+end_src

** Projectile
Enable Projectile Globally
#+begin_src emacs-lisp
(projectile-global-mode)
(helm-projectile-toggle 1)
(setq projectile-enable-caching t)
#+end_src

Projectile default search path and indexing
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Documents/Projects/"))
(setq projectile-indexing-method 'alien)
#+end_src


Bind switch project to =helm-projectile=
#+begin_src emacs-lisp
(setq projectile-switch-project-action 'helm-projectile)
#+end_src

** Shell
Setup shell setting to work with zsh
#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)
(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)

#+end_src

#+begin_src emacs-lisp
(setq ac-modes (delq 'python-mode ac-modes))
#+end_src

** Flycheck
#+begin_src emacs-lisp
 (when (require 'flycheck nil t)
   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
   (add-hook 'elpy-mode-hook 'flycheck-mode))
#+end_src

Use aspell to fix my mistakes
#+begin_src emacs-lisp
(setq flyspell-issue-welcome-flag nil)
(if (eq system-type 'darwin)
    (setq-default ispell-program-name "/usr/local/bin/aspell")
  (setq-default ispell-program-name "/usr/bin/aspell"))
(setq-default ispell-list-command "list")

#+end_src

** Markdown
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
(add-hook 'markdown-mode-hook
          (lambda ()
            (visual-line-mode t)
            (writegood-mode t)
            (flyspell-mode t)))

#+end_src

** Org
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("^\\*.org\\*$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))

  (add-hook 'org-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name (current-buffer))))
              (when (and filename (string= "trello" (file-name-extension filename)))
              (org-trello-mode)))))


  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'writegood-mode)
  (add-hook 'org-mode-hook 'org-password-manager-key-bindings)
  (add-hook 'org-mode-hook 'org-beamer-mode)
#+end_src

** Dumb Jump
Dumb jump lets me goto definitions easily using a dumb =ag= search
#+begin_src emacs-lisp
(dumb-jump-mode 1)
(setq dumb-jump-selector 'helm)
#+end_src

** Ontology
*** Turtle Format
Enable bindings for turtle format
#+begin_src emacs-lisp
(autoload 'ttl-mode "ttl-mode" "Major mode for OWL or Turtle files" t)
(add-hook 'ttl-mode-hook    ; Turn on font lock when in ttl mode
          'turn-on-font-lock)
(setq auto-mode-alist
      (append
       (list
        '("\\.n3" . ttl-mode)
        '("\\.ttl" . ttl-mode))
       auto-mode-alist))
#+end_src
* Org
** Global
Time tracking on tasks
#+begin_src emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+end_src

Image Scaling 
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src

Allow alphabets ‘a.’, ‘A.’, ‘a)’ and ‘A) as list elements:
#+begin_src emacs-lisp
(setq org-list-allow-alphabetical t)
#+end_src

** Exo-cortex
A place to store and remember everything that I can't burden my brain with thinking about. 
*** File Organization
- Capture :: All unscheduled sudden surges of things which I remember get captured into this file. Mostly things here are without a schedule or deadline, which need to refiling and revisiting sometime in the future. Also serves as the Bookmark collection of websites, videos, books, courses and podcasts. 
#+begin_src emacs-lisp
(setq bookmarks-file-path "~/Documents/org-notes/exocortex/capture.org")
(setq org-default-notes-file bookmarks-file-path)
#+end_src

- Inbox :: All the scheduled tasks go into this file. If something gets scheduled from the capture file, they move into inbox. 
#+begin_src emacs-lisp
(setq tasks-file-path "~/Documents/org-notes/exocortex/inbox.org")
#+end_src

- Home Tasks :: Its better to keep work and home separate. So a separate home task file
#+begin_src emacs-lisp
(setq home-tasks-file-path "~/Dropbox/org-notes/home/tasks.org")
#+end_src

- References :: All the papers which need to be read, are captured into references.bib, whose offshot gets captured in references. They get planned and scheduled, and at max may be a part of a project. The section in references only moves to Projects, and never to Inbox.
#+begin_src emacs-lisp
(setq references-file-path "~/Documents/org-notes/bibliography/references.org")
#+end_src

- Projects :: This makes sure that everything I start gets done. Things move from capture into projects, gets scheduled and mostly has notes and sub items - scheduled or unscheduled. Nothing gets added to projects without having lived in capture
#+begin_src emacs-lisp
(setq projects-file-path "~/Documents/org-notes/exocortex/projects.org")
#+end_src

**** ORG-Agenda: 
All the above mentioned files just form a part of the bigger agenda.
#+begin_src emacs-lisp
(setq org-agenda-files '("~/Documents/org-notes/exocortex/inbox.org"
"~/Documents/org-notes/exocortex/projects.org"
"~/Documents/org-notes/exocortex/capture.org"
"~/Documents/org-notes/exocortex/journal.org"
"~/Documents/org-notes/bibliography/references.org"
"~/Documents/org-notes/exocortex/daily.org"
"~/Dropbox/org-notes/home/tasks.org"
))
#+end_src

*** Org TODO cycles

After multiple iterations of the TODO cycles, finally decided on using a simple list of TODOS, and to rely more on tags to mark the kind of TODO

- TODO :: Anything that needs to be done. Mostly without a schedule or a deadline or with an arbitrary future schedule, but must be picked up on priority
- PLANNED :: Things move from TODO to PLANNED, when a schedule or a deadline is attached to them and it has been slotted to be picked up.
- HOLD :: Things which had been picked up but have been put on hold due to
  1. Further updates or conflicting requirement with some other task
  2. Is waiting on a feedback from a second person
- INPROGRESS :: Currently in play
- DONE :: Finished, and ready to be archived.
- CANCELLED :: No more important. Ready to be archived.
- RE-VISIT :: Things done, but need a second opinion
- POSTPONED :: Not important at this moment. Can't be archived until DONE or CANCELLED

#+begin_src emacs-lisp
(setq org-todo-keywords
(quote ((sequence "TODO(t)" "PLANNED(p)" "HOLD(h)" "INPROGRESS(i!)"  "|" "DONE(d!)" "CANCELLED(c)" )
(sequence "POSTPONED(P)" "|" "RE-VISIT(v)")
)))

(setq org-todo-keyword-faces '(
("TODO" . (:foreground "#ff39a3" :weight bold))
("PLANNED" . (:foreground "#81D8D1"  :weight bold))
("HOLD" . (:foreground "#ff9a00" :weight bold))
("INPROGRESS" . (:foreground "#ffdd00" :weight bold))
("CANCELLED" . (:foreground "white" :background "#4d4d4d" :weight bold))
("RE-VISIT" . (:foreground "#88ddee" :background "#454545" :weight bold))
("POSTPONED" . "#008080")))
#+end_src

#+RESULTS:
: ((TODO :foreground #ff39a3 :weight bold) (PLANNED :foreground #81D8D1 :weight bold) (HOLD :foreground #ff9a00 :weight bold) (INPROGRESS :foreground #ffdd00 :weight bold) (CANCELLED :foreground white :background #4d4d4d :weight bold) (RE-VISIT :foreground #88ddee :background #454545 :weight bold) (POSTPONED . #008080))

** PDF view
Install PDF tools 
#+begin_src emacs-lisp
(pdf-tools-install)
#+end_src

Always open PDF inside EMACS itself
#+begin_src emacs-lisp
(eval-after-load 'org '(require 'org-pdfview))

(add-to-list 'org-file-apps 
             '("\\.pdf\\'" . (lambda (file link)
                                     (org-pdfview-open link))))
#+end_src

Fine grained zoom with + and - to 10% 
#+begin_src emacs-lisp
(setq pdf-view-resize-factor 1.1)
#+end_src

Dark Mode always
#+begin_src emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
(setq-default pdf-view-display-size 'fit-page)
#+end_src

** Org-agenda
Org-super-agenda
#+begin_src emacs-lisp
(setq org-agenda-time-grid '((daily today require-timed)
 (800 1000 1200 1400 1600 1800 2000)
 "......" "----------------")
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-include-diary nil
        org-agenda-use-time-grid t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-with-log-mode t)

    (setq org-super-agenda-groups
           '((:log t)
             (:name "Schedule"
                    :time-grid t)
             (:name "Today "
                    :scheduled today)
             (:name "Due Today"
                    :deadline today)
             (:name "Books"
                    :tag "@book"
                    :order 8)
             (:name "Courses"
                    :tag "@course"
                    :order 8)
             (:name "Birthdays & Anniversaries"
                    :tag ("@anniversary" "@birthday")
                    :order 98)
             (:name "Papers"
                    :tag "@article"
                    :order 8)
             (:name "Overdue"
                    :deadline past)
             (:name "Bills and Payments"
                    :tag "@bills_and_payments")
             (:name "Important"
                    :priority ("A" "B"))
             (:name "Due soon"
                    :deadline future)
             (:name "Inprogress"
                    :todo "INPROGRESS"
                    :order 6)
             (:name "On Hold"
                    :todo "HOLD"
                    :order 7)
             (:name "Shopping List"
                    :tag "@shopping_list")
             (:name "Scheduled earlier"
                    :scheduled past)))

#+end_src

Display TODO list in a formatted manner
#+begin_src emacs-lisp
  (add-to-list 'org-agenda-custom-commands
  '("t" "All TODOs groups by category" alltodo ""
    ((org-super-agenda-groups '((:auto-category t))))))

#+end_src

Display agenda in a full window view instead of a frame view
#+begin_src emacs-lisp
(setq org-agenda-window-setup 'reorganize-frame)
#+end_src

#+begin_src emacs-lisp
  (require 'org-agenda)
  (setq org-agenda-prefix-format '(
   (agenda  . " %i  %-12:c%?-12t% s") ;; file name + org-agenda-entry-type
    ;;(agenda  . "%-12c%?-12t% s")
    (timeline . " % s")
    (todo  . " %?-12:c")
    (tags  . " %i %-12:c")
    (search . " %i %-12:c")))
#+end_src

Disable visual line mode in agenda view as it wraps the tags to new line
#+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (visual-line-mode 1)
            (toggle-truncate-lines 1)))
#+end_src


** Files
List of global org files
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org-notes")
(setq secrets-file-path "~/Documents/Personal/secrets.org.gpg")
(setq journal-file-path "~/Documents/org-notes/exocortex/journal.org")
(setq secrets-file (cons 'file secrets-file-path))
(set-register ?s secrets-file)
(set-register ?r (cons 'file references-file-path))
(set-register ?p (cons 'file projects-file-path))
(set-register ?b (cons 'file bookmarks-file-path))
(set-register ?j (cons 'file journal-file-path))



(setq org-agenda-file-regexp "\\`[^.].*\\.org'\\|[0-9]+$")
(add-hook 'diary-display-hook 'diary-fancy-display)

(setq org-refile-targets '(("~/Documents/org-notes/exocortex/projects.org" :maxlevel . 3)
                           ("~/Dropbox/org-notes/home/tasks.org" :maxlevel . 2)
                           ("~/Documents/org-notes/exocortex/inbox.org" :level . 1)
                           ("~/Documents/org-notes/exocortex/capture.org" :maxlevel . 1)))


#+end_src

** Org Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (prolog . t)
     (lisp . t)
     (shell . t)
     (ein . t)))

  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("python" "lisp" "emacs-lisp" "clojure" "prolog" "sh"))))

  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

#+end_src

#+RESULTS:
: my-org-confirm-babel-evaluate

** Org latex
#+begin_src emacs-lisp
(setq org-latex-pdf-process
    '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))

(add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
(add-to-list 'org-latex-default-packages-alist
	     '("linktocpage,pdfstartview=FitH,colorlinks,
linkcolor=blue,anchorcolor=blue,
citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
	       "hyperref" nil)
	     t)
(setq org-latex-prefer-user-labels t)
#+end_src

** Org ref
Search through bibtex reference using helm reference
#+begin_src emacs-lisp
(defun my/helm-bibtex-publications (&optional arg)
  "Search BibTeX entries authored by “Jane Doe”.

With a prefix ARG, the cache is invalidated and the bibliography reread."
  (interactive "P")
  (helm-bibtex arg nil ""))

#+end_src

Manage notes using helm bibtex
#+begin_src emacs-lisp
;; Tell org-ref to let helm-bibtex find notes for it
(setq org-ref-notes-function
      (lambda (thekey)
	(let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
	  (bibtex-completion-edit-notes
	   (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
#+end_src

Org-ref Files
#+begin_src emacs-lisp
(setq reftex-default-bibliography '("~/Documents/org-notes/bibliography/references.bib")
      org-ref-default-bibliography '("~/Documents/org-notes/bibliography/references.bib")
      org-ref-pdf-directory "~/Documents/org-notes/bibliography/bibtex-pdfs/")

#+end_src

*** Bibtex
#+begin_src emacs-lisp
(setq bibtex-completion-bibliography "~/Documents/org-notes/bibliography/references.bib"
      bibtex-completion-library-path "~/Documents/org-notes/bibliography/bibtex-pdfs"
      bibtex-completion-notes-path "~/Documents/org-notes/bibliography/helm-bibtex-notes"
      bibtex-completion-pdf-field "File"
      bibtex-completion-pdf-symbol "⌘"
      bibtex-completion-notes-symbol "✎"
      bibtex-completion-additional-search-fields '(tags keywords))
(setq bibtex-completion-display-formats
      '((t . "${author:30} ${title:150} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:7}")))
#+end_src
** Org-journal
Org-Journal settings
#+begin_src emacs-lisp
  (setq org-journal-dir "~/Documents/Personal/.journal/")
  (setq org-journal-file-format "%Y%m%d")
  (setq org-journal-file-type 'yearly)
  (setq org-journal-carryover-items "nil")
  (require 'org-journal)
  (org-reload)
#+end_src

** Capture Templates                                        :non_exec_block:
#+begin_src emacs-lisp
(setq org-capture-templates
      '(
#+end_src

*** Secrets
#+begin_src emacs-lisp
	("s" "Secrets" entry
	 (file+headline secrets-file-path "Secrets")
	 "* [[%^{Link}][%^{Description}]]
 :PROPERTIES:
 :USERNAME: %^{Username}
 :PASSWORD: %^{Password}
 :END:
")
#+end_src

*** Inbox Tasks
#+begin_src emacs-lisp

("t" "Todos")
("tt" "Task [inbox]" entry
	 (file+headline tasks-file-path "Tasks")
	 "* TODO %i%?")
#+end_src

Also the home tasks
#+begin_src emacs-lisp
("ts" "Shopping list [home]" checkitem
	 (file+headline home-tasks-file-path "Shopping")
	 "- [ ] %i%? ")

("tr" "Reminder [home]" entry
	 (file+headline home-tasks-file-path "Non-Recurring")
	 "* TODO %i%?")
#+end_src

*** Reference Papers
Capture reference papers with a small help of =C-c r y=
#+begin_src emacs-lisp
("r" "Paper" entry
(file+headline references-file-path "Papers")
	 "*  %^g %i%?
     :PROPERTIES:
     :TYPE: Paper
     :END:
")
#+end_src

*** Journal
#+begin_src emacs-lisp

("j" "Journal" entry
(file+datetree journal-file-path)
   "* %?")
#+end_src

*** Capture
#+begin_src emacs-lisp
("c" "Capture")
("cb" "Book" entry
(file+headline bookmarks-file-path "Books")
"* %^{title}  %^g
       :PROPERTIES:
       :TYPE: Book
       :URL: [[%^{url}][source]]
       :END:
")
("cw" "Web URL" entry
(file+headline bookmarks-file-path "Web")
"* %^{title}  %^g
       :PROPERTIES:
       :TYPE: Web
       :URL: [[%^{url}][source]]
       :END:
")
("cv" "Videos" entry
(file+headline bookmarks-file-path "Videos")
"* %^{title}  %^g
       :PROPERTIES:
       :TYPE: Video
       :URL: [[%^{url}][source]]
       :END:
")
("cm" "Miscelleneous" entry
(file+headline bookmarks-file-path "Misc")
"* TODO %i%?")
("cc" "Courses" entry
(file+headline bookmarks-file-path "Courses")
"* TODO %^{title} %^g
       :PROPERTIES:
       :TYPE: Course
       :URL: [[%^{url}][source]]
       :END:
")))
#+end_src

* Internet, Social, Feed Manager
** Elfeed
Feed reader setups
*** Configuration 
[[file:elfeed.org][Configuration Org]]
#+begin_src emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+end_src
*** Bookmarks
All the bookmark loaders
#+begin_src emacs-lisp
(defun my/elfeed-outline-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))

(defun my/elfeed-outline-show-daily ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-daily"))


(defun my/elfeed-outline-show-tech ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-tech"))

(defun my/elfeed-outline-art-and-music ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-artNmusic"))

(defun my/elfeed-outline-show-podcast ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-podcast"))
#+end_src

*** EMMS
Should have its own header, but as of now just lives inside the elfeed section
#+begin_src emacs-lisp
(emms-all)
(emms-default-players)
(define-emms-simple-player afplay '(file)
      (regexp-opt '(".mp3" ".m4a" ".aac" ".ogg" ".wav" ".pls"))
      "afplay")
    (setq emms-player-list `(,emms-player-afplay))
#+end_src

Download an enclosure and play
#+begin_src emacs-lisp
(defun my/download-enclosure-and-play (url)
  "Download asynchronously the enclosure from URL to PATH."
  (emms-stop)
  (let  ((url-enclosure url))
        (async-start
         `(lambda ()
           ,(url-copy-file url-enclosure "/tmp/audio.mp3" t))
         `(lambda (_)
	   ,(emms-play-file "/tmp/audio.mp3")))))

(defun my/replay-previous ()
  (interactive)
  (emms-play-file "/tmp/audio.mp3"))

(defun my/elfeed-outline-show-play-enclosure ()
  "Play enclosure number ENCLOSURE-INDEX from current entry using EMMS.
Prompts for ENCLOSURE-INDEX when called interactively."
  (interactive)
  (elfeed-search-untag-all-unread)
  (let ((entry (elfeed-search-selected :single)))
  (setq url-enclosure (car (elt (elfeed-entry-enclosures entry) 0))))
  (my/download-enclosure-and-play url-enclosure))

#+end_src

*** Customization
Custom functions to make life a little easier
**** Save state before Quit
#+begin_src emacs-lisp
;;write to disk when quiting
(defun my/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))
#+end_src
**** Mark the favourites
#+begin_src emacs-lisp
(defalias 'elfeed-toggle-star
  (elfeed-expose #'elfeed-search-toggle-all 'star))
#+end_src
**** Custom Colors
***** News
#+begin_src emacs-lisp
(defface daily-news
  '((t :foreground "#AFF"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(daily daily-news) elfeed-search-face-alist)
#+end_src
***** Podcasts
#+begin_src emacs-lisp
(defface elfeed-audio
  '((t :foreground "#FA0"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(podcast elfeed-audio) elfeed-search-face-alist)
#+end_src
***** Technology
#+begin_src emacs-lisp
(defface elfeed-reddit
  '((t :foreground "#0AA"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(tech elfeed-reddit) elfeed-search-face-alist)
#+end_src

***** Stars
#+begin_src emacs-lisp
  ;; face for starred articles
  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"))
    "Marks a starred Elfeed entry."
    :group 'elfeed)

  (push '(star elfeed-search-starred-title-face) elfeed-search-face-alist)
    #+end_src
    
**** Titles, See more titles and Let the computer read out the title ( Mac only)
#+begin_src emacs-lisp
(defun my/outline-show-full-title ()
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (message "%s" (propertize (elfeed-entry-title entry)))
))

(defun say (message)
  (call-process "say" nil nil nil message))

(defun my/elfeed-say ()
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (say (elfeed-entry-title entry))))

#+end_src

**** In browser open URL
#+begin_src emacs-lisp
(defun my/elfeed-show-visit (&optional use-generic-p)
  "Visit the current entry in your browser using `browse-url'.
If there is a prefix argument, visit the current entry in the
browser defined by `browse-url-generic-program'."
  (interactive "P")
  (let ((link (elfeed-entry-link elfeed-show-entry)))
    (when link
      (message "Sent to browser: %s" link)
      (if use-generic-p
          (browse-url-generic link)
        (browse-web link)))))

#+end_src

** Twitter Mode
Setup for [[https://www.emacswiki.org/emacs/TwitteringMode][twitter mode]]
#+begin_src emacs-lisp
(setq twittering-use-master-password t)
(setq twittering-icon-mode t)               
(setq twittering-timer-interval 300)        
(setq twittering-url-show-status nil)       
(add-hook 'twittering-edit-mode-hook (lambda () (ispell-minor-mode) (flyspell-mode)))
#+end_src

** IRC
Setup for managing IRC 
#+begin_src emacs-lisp
(setq erc-prompt-for-nickserv-password nil)
(defun my/connect-erc () 
(interactive)
(erc 
:server "irc.gotham.chat" :port "6667" :nick "translucentInk" :password nil ))
#+end_src

#+RESULTS:
: my/connect-erc

** Tor
#+begin_src emacs-lisp
(defun my/launch-process (name buffer-name process &rest args) 
(apply #'start-process name buffer-name process args)
(with-current-buffer buffer-name
        (local-set-key (kbd "C-c C-c") (lambda () (interactive) (kill-process))))
)
#+end_src

#+begin_src emacs-lisp
(defun my/launch-tor()
(interactive)
(message "Starting Tor sub-process.")
(my/launch-process "tor-process" "*tor*" "tor")
(message "Launching Firefox with proxy_profile")
(my/launch-process "tor-process" "*tor*" "/Applications/Firefox.app/Contents/MacOS/firefox" "-P" "proxy_firefox" "--new-window" "https://check.torproject.org/")
(message "Process launched in *tor* buffer.")
)
#+end_src

** TODO EWW
Set the default browser as EWW
*** TODO Setup firefox
* Custom Configurations and Functions
** GIT
Magit and git-gutter configurations
#+begin_src emacs-lisp
(global-git-gutter+-mode t)
(setq git-gutter+-disabled-modes '(asm-mode image-mode))
(set-face-background 'git-gutter+-modified "purple") ;; background color
(set-face-foreground 'git-gutter+-added "green")
(set-face-foreground 'git-gutter+-deleted "red")
#+end_src

** Kill buffer
Kill buffer asks way too many questions on what to kill, and since I would want to kill what I am on 
#+begin_src emacs-lisp
(defun my/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
#+end_src
** Windows and Frames
Have a easier navigation around open windows
#+begin_src emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))
#+end_src
** Basic Text editing
Duplicate an entire line
#+begin_src emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
  (pop kill-ring)
  (move-beginning-of-line 1)
  )
#+end_src
** View Mode
Open Read-only files in view-mode by default
#+begin_src emacs-lisp
(setq view-read-only t)
#+end_src

View mode can be toggled by ~C-x C-q~.

Give Visual Cue using cursor while in view mode
#+begin_src emacs-lisp
(add-hook 'view-mode-hook
          (defun view-mode-hookee+ ()
            (setq cursor-type (if view-mode 'bar 'box))))

#+end_src
* Hydra
** GIT
#+begin_src emacs-lisp
(defhydra hydra-magit (:color blue)
  "
  ^
  ^Git  ^             ^Do^
  ^─────^─────────────^──^─────────────
  _n_ Next Hunk       _p_ Previous Hunk
  _w_ Show Hunk       _t_ Stage Hunk
  _q_ Quit            _b_ Blame
  _c_ Clone           _s_ Status
  _i_ Init            ^^
  "
  ("q" nil)
  ("n" git-gutter+-next-hunk)
  ("p" git-gutter+-previous-hunk)
  ("w" git-gutter+-show-hunk)
  ("t" git-gutter+-stage-hunks)
  ("b" magit-blame)
  ("c" magit-clone)
  ("i" magit-init)
  ("s" magit-status))
#+end_src

** Projectile
#+begin_src emacs-lisp
(defhydra hydra-projectile (:color blue)
  "
^
^Projectile^        ^Buffers^           ^Find^              ^Search^
^──────────^────────^───────^───────────^────^──────────────^──────^────────────
_q_ quit            _b_ list            _d_ directory       _r_ replace
_i_ reset cache     _K_ kill all        _D_ root            _R_ regexp replace
^^                  _S_ save all        _f_ file            _s_ ag
^^                  ^^                  _p_ project         ^^
^^                  ^^                  ^^                  ^^
"
  ("q" nil)
  ("b" helm-projectile-switch-to-buffer)
  ("d" helm-projectile-find-dir)
  ("D" projectile-dired)
  ("f" helm-projectile)
  ("i" projectile-invalidate-cache :color red)
  ("K" projectile-kill-buffers)
  ("p" helm-projectile-switch-project)
  ("r" projectile-replace)
  ("R" projectile-replace-regexp)
  ("s" helm-projectile-ag)
  ("S" projectile-save-project-buffers))
#+end_src

** Helm
#+begin_src emacs-lisp
(defhydra hydra-helm (:color blue)
  "
^
^Helm^              ^Browse^                ^Python^
^────^──────────────^──────^────────────────^──────^───────────────
_q_ quit            _i_ imenu               _c_ Conda Activate
_r_ resume          _s_ swoop               _d_ Conda Deactivate
^^                  _S_ swoop all           _n_ Jupyter Notebooks
^^                  _k_ kill-ring           ^^
^^                  _b_ org brain           ^^
^^                  _m_ Mark Rings          ^^
^^                  ^^
"
  ("q" nil)
  ("i" helm-imenu)
  ("b" org-brain-visualize)
  ("m" helm-all-mark-rings)
  ("s" helm-swoop)
  ("S" helm-multi-swoop-all)
  ("k" helm-show-kill-ring)
  ("r" helm-resume)
  ("n" ein:notebook-open)
  ("c" pyvenv-workon)
  ("d" pyvenv-deactivate))
#+end_src

** Org
*** org-ref
Org-ref Sugars
#+begin_src emacs-lisp
(defhydra hydra-org-ref (:color blue)
  "
  ^
  ^Org-ref  ^               ^Do^
  ^─────^───────────────────^──^──────────────────
  _l_ Create label          _i_ Insert Reference
  _b_ Add doi bibtex        _y_ Bibtex Yank          
  _A_ Add arxiv bibtex      _a_ Arxiv Search
  _q_ Quit                 
  "
  ("q" nil)
  ("l" org-ref-helm-insert-label-link) 
  ("i" org-ref-helm-insert-ref-link)
  ("b" doi-add-bibtex-entry)
  ("A" arxiv-add-bibtex-entry)
  ("a" arxiv-lookup)
  ("y" org-bibtex-yank))
#+end_src

*** org-trello
Hydra bindings for org-trello
#+begin_src emacs-lisp
(defhydra hydra-org-trello (:color blue)
  "
  ^Metadata ^                   ^Board^                        ^Card^
  ^─────────^───────────────────^────^────────────────────────-^────^─────────────
  _i_ Install Board Metadata    _s_ Sync Buffer                _c_ Sync Card
  _u_ Update Board Metadata     _J_ Open Board in Browser      _j_ Ope card in browser
  _q_ Quit                      _l_ Show board labels          _a_ Signup on Card
  ^^                            ^^                             _C_ Add Comment on Card
  ^^                            ^^                             _D_ Delete Comment on Card

  "
  ("q" nil)
;; Board Metadata
  ("i" org-trello-install-board-metadata) 
  ("u" org-trello-update-board-metadata) 
;; Board
  ("s" org-trello-sync-buffer) 
  ("J" org-trello-jump-to-trello-board) 
  ("l" org-trello-show-board-labels) 
;; Card
  ("c" org-trello-sync-card) 
  ("j" org-trello-jump-to-trello-card) 
  ("a" org-trello-assign-me) 
  ("C" org-trello-add-card-comment) 
  ("D" org-trello-delete-card-commen))
#+end_src

** Spotify
Spotify sugars
#+begin_src emacs-lisp
(defhydra hydra-spotify (:color blue)
  "
  ^
  ^Spotify  ^             ^Do^
  ^────────^──────────────^──^─────────────
  _p_ Play/Pause          _N_ Next
  _s_ Stop                _P_ Previous
  _q_ Quit            
  "
  ("q" nil)
  ("p" spotify-playpause)
  ("N" spotify-next)
  ("P" spotify-previous)
  ("s" spotify-quit))
#+end_src
** Internet, Social, Feed Manager
Hydra Menu for elfeed and twitter
#+begin_src emacs-lisp
(defhydra hydra-social-feed (:color blue)
  "
  ^
  ^Internet^       ^Social^       ^Feed^
  ^────────^───────^──────^───────^────^───
  _p_ Tor          _t_ Twitter   _e_ El Feed
  _b_ EWW          _i_ IRC
  _q_ Quit            
  "
  ("q" nil)
  ("e" elfeed)
  ("b" browse-web)
  ("i" my/connect-erc)
  ("p" my/launch-tor)
  ("t" twit))
#+end_src

#+RESULTS:
: hydra-social-feed/body

** Window Move
Quickly move around windows
#+begin_src emacs-lisp
(defhydra hydra-window-move (:color blue)
  "
  ^
  ^Window  ^              
  ^────────^───────────^─────^─────────────
  _p_ Move Up          _n_ Move Down
  _b_ Move Left        _f_ Move Right
  _q_ Quit            
  "
  ("q" nil)
  ("p" windmove-up)
  ("n" windmove-down)
  ("b" windmove-left)
  ("f" windmove-right))
#+end_src

* Key Bindings
Define custom key bindings.
** Windows and Frames
Basic key bindings to play around with frames and window. Binding Delete frame defaulted at  =C-x 5 0= to =C-x w=

#+begin_src emacs-lisp
(global-set-key (kbd "C-x w") 'delete-frame)
(global-set-key (kbd "C-x C-b") 'switch-to-buffer)
(global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "s->") #'other-window)
(global-set-key (kbd "s-<") #'prev-window)
#+end_src


*** Shell
Have a Doom styled console launch binding
#+begin_src emacs-lisp
(global-set-key (kbd "s-`") 'vterm)
#+end_src

** Basic Text editing
Duplicate a line
#+begin_src emacs-lisp
(global-set-key (kbd "C-c d") 'duplicate-line)
#+end_src

Mark occurrences ( Rudimentary version of iedit)
#+begin_src emacs-lisp
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-s-<mouse-1>") 'mc/add-cursor-on-click)
#+end_src

Expand Region
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

Track the last edited location
#+begin_src emacs-lisp
(global-set-key (kbd "M-s-<left>") 'goto-last-change)
(global-set-key (kbd "M-s-<right>") 'goto-last-change-reverse)
#+end_src

#+RESULTS:
: goto-last-change-reverse

** GIT
Git key bindings, with added sugar of hydra
#+begin_src emacs-lisp
(global-set-key (kbd "C-c g") 'magit-status)
(global-set-key (kbd "C-c m") 'hydra-magit/body)
#+end_src

** Projectile
#+begin_src emacs-lisp
(global-set-key (kbd "C-c p") 'hydra-projectile/body)
#+end_src

** Kill buffer
Just kill the current buffer without asking too many questions
#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'my/kill-this-buffer)
#+end_src

** Helm
Have helm handle most of the things around

#+begin_src emacs-lisp
(global-set-key (kbd "M-x") #'helm-M-x)
(global-set-key (kbd "M-y") 'helm-show-kill-ring)
(global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
(global-set-key (kbd "C-x C-f") #'helm-find-files)
(global-set-key (kbd "C-c h") 'hydra-helm/body)
(global-set-key (kbd "C-x p") 'my/helm-bibtex-publications)
#+end_src

** Org
References, Publications and Citations
#+begin_src emacs-lisp
(setq org-ref-insert-cite-key "C-c M-]")
#+end_src

Links agendas and capture templates
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c A") 'cfw:open-org-calendar)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

Org-ref hydra sugar
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'hydra-org-ref/body)
#+end_src

Org-brain
#+begin_src emacs-lisp
 (define-key org-mode-map (kbd "C-c b") 'org-brain-visualize)
#+end_src

Org-trello
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c t") 'hydra-org-trello/body)
#+end_src

PDF View
#+begin_src emacs-lisp
(define-key pdf-view-mode-map (kbd "j") 'pdf-view-next-line-or-next-page)
(define-key pdf-view-mode-map (kbd "k") 'pdf-view-previous-line-or-previous-page)
(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
(define-key org-mode-map (kbd "C-c i") 'interleave-mode)
#+end_src

** Spotify
Spotify hydra sugar
#+begin_src emacs-lisp
(global-set-key (kbd "C-c s") 'hydra-spotify/body)
#+end_src

** Json
Pretty print JSON buffer
#+begin_src emacs-lisp
(define-key json-mode-map (kbd "C-M-/") 'json-pretty-print-buffer)
#+end_src
** Python
Pytest keybinding in python mode
#+begin_src emacs-lisp
(define-key python-mode-map (kbd "C-c t") 'python-pytest-popup)
#+end_src
** Password Manager
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c C-p C-g") 'password-generator-phonetic)
(define-key org-mode-map (kbd "C-c C-p C-p") 'org-get-pin)
#+end_src
** Social Feed
#+begin_src emacs-lisp
(global-set-key (kbd "C-c f") 'hydra-social-feed/body)
#+end_src

Open elfeed links inline browser
#+begin_src emacs-lisp
(define-key elfeed-show-mode-map (kbd "o") 'my/elfeed-show-visit)
#+end_src

*** Elfeed bookmarks and custom keymaps

#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
              ("A" . my/elfeed-outline-show-all)
              ("M" . my/elfeed-outline-art-and-music)
              ("D" . my/elfeed-outline-show-daily)
              ("T" . my/elfeed-outline-show-tech)
              ("P" . my/elfeed-outline-show-podcast)
              (">" . my/elfeed-outline-show-play-enclosure)
              (";" . emms-stop)
              (":" . my/replay-previous)
              ("x" . my/elfeed-say)
              ("*" . elfeed-toggle-star)
              ("<SPC>" . my/outline-show-full-title)))
#+end_src

** View Mode
Disable view-mode instead of closing buffer on pressing ~C-q~

#+begin_src emacs-lisp
(define-key view-mode-map (kbd "C-q") 'read-only-mode)
#+end_src

Remap movement keys to ~b~, ~f~, ~n~ and ~p~
#+begin_src emacs-lisp
(define-key view-mode-map (kbd "b") 'backward-char)
(define-key view-mode-map (kbd "f") 'forward-char)
(define-key view-mode-map (kbd "n") 'next-line)
(define-key view-mode-map (kbd "p") 'previous-line)
#+end_src

Also add basic vim key bindings:  ~h~, ~l~, ~j~ and ~k~

#+begin_src emacs-lisp
(define-key view-mode-map (kbd "h") 'backward-char)
(define-key view-mode-map (kbd "l") 'forward-char)
(define-key view-mode-map (kbd "j") 'next-line)
(define-key view-mode-map (kbd "k") 'previous-line)
#+end_src

Remap scroll screen and previous screen to ~v~ and ~V~
#+begin_src emacs-lisp
(define-key view-mode-map (kbd "v") 'scroll-up-command)
(define-key view-mode-map (kbd "V") 'scroll-down-command)
#+end_src

Remap recenter-top-bottom ~l~
#+begin_src emacs-lisp
(define-key view-mode-map (kbd "l") 'recenter-top-bottom)
#+end_src

** Jupyter Notebooks

Execute all cells
#+begin_src emacs-lisp
(define-key ein:notebook-mode-map (kbd "C-c C-e") 'ein:worksheet-execute-all-cell)
#+end_src
