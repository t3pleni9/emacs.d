#+TITLE: Emacs Configurations
#+AUTHOR: Justin Jose

#+HTML:<div align=center><a href="https://gitlab.com/t3pleni9/emacs-d"><img alt="Emacs Logo" width="60" height="60" src="https://upload.wikimedia.org/wikipedia/commons/0/08/EmacsIcon.svg"></a>

A nifty [[https://orgmode.org/worg/org-contrib/babel/][org-babel]] Emacs configuration.

#+HTML:</div>
* Installation
** EMACS 
Follow the [[https://www.gnu.org/software/emacs/download.html][Download & installation]] guide to setup vanilla emacs.
 This config is based on Emacs v26.1, versions newer than this might require a modified approach for installation and configuration.
** Configuration
To install, clone this repository, and replace it with the =.emacs.d= in your =$HOME= directory, for EMACS <= v26.1
#+begin_src bash
cd ~
mv .emacs.d .emacs.d.bkp # Always make backups
git clone https://github.com/t3pleni9/emacs.d.git
mv emacs.d .emacs.d
#+end_src

Post cloning and installation, start EMACS. The initial setup will take some time as it would download the relevant packages and install it. 
Along with regular packages, clone the following packages into =<EMACS-config-root>/external/= to utilise their respective functionalities.
- https://github.com/t3pleni9/emacs-totp.git :: Support of Time based OTP (TOTP) for org-password
- https://gitlab.com/t3pleni9/py-build.git :: Integrates PyBuild with  projectile and anaconda-venv

* TODO Require
- [ ] Need to handle personal git projects
One require to rule them all
#+begin_src emacs-lisp
  (require 'org)
  (require 'auto-complete)
  (require 'projectile)
  (require 'all-the-icons)
  (require 'multiple-cursors)
  (require 'virtualenvwrapper)
  (require 'helm)
  (require 'helm-projectile)
  (require 'helm-swoop)
  (require 'json-mode)
  (require 'emms-setup)
  (require 'emms-mode-line)
  (require 'emms-player-mpv)
  (require 'scroll-bar)
  (require 'async nil :noerror)
  (require 'org-ref)
  (require 'org-ref-pdf)
  (require 'org-ref-url-utils)
  (require 'org-ref-arxiv)
  (require 'org-bullets)
  (require 'smart-mode-line)
  (require 'dumb-jump)
  (require 'calfw-org)
  (require 'iedit)
  (require 'rust-mode)
  (require 'org-super-agenda)
  (require 'emacs-totp)
  (require 'pyb)
  (require 'image+)
  (require 'dashboard)
  (require 'org-trello)
  (require 'twittering-mode)
  (require 'view)
  (require 'ein)
  (require 'ein-notebook)
  (require 'org-alert)
  (require 'alert)
  (require 'volume)
  (require 'define-word)
  (require 'org-roam)
  (require 'org-roam-server)
  (require 'deft)
  (require 'wrap-region)
  (require 'zone)
  (require 'org-drill)
  (require 'eshell-prompt-extras)
  (require 'smartscan)
  (require 'org-notify nil :noerror)
  (require 'org-present)
  (require 'eww)
  (require 'pdf-view-restore)
  (require 'org-habit)
  (require 'ob-elixir)
  (require 'elixir-mode)
  (require 'org-noter)
#+end_src

* Emacs startup, and others
** Path setting
#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin" ":/Users/in-justin.jose/.miniconda/bin" ":/Users/in-justin.jose/.local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+end_src

** Themes
Loading Theme post every operation
#+begin_src emacs-lisp
  (load-theme 'darktooth t)
  (load-theme 'smart-mode-line-dark t)
#+end_src

Flatten the wavy red underlines for error
#+begin_src emacs-lisp
  ;; no waves, use underlines which look better
  (defun theme-tweaks-flatten-underline+ (face)
    "Change underline style of FACE from wave to straight line."
    (let ((underline (face-attribute face :underline)))
      (when (eq (plist-get underline :style) 'wave)
        (plist-put underline :style 'line)
        (set-face-attribute face nil :underline underline))))

  ;; initial flattening
  (mapatoms (lambda (atom)
              (when (facep atom)
                (theme-tweaks-flatten-underline+ atom))))

  ;; flatten on each face definition in the future
  (define-advice custom-declare-face (:around (fun &rest args) flatten-face)
    (let ((face (apply fun args)))
      (theme-tweaks-flatten-underline+ face)
      face))
#+end_src

** Global
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) ;; outline-hide the startup messag
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (elpy-enable)				
  (epa-file-enable)

  (setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin/"))
  (sml/setup)
  (setq sml/no-confirm-load-theme t)
#+end_src

Disable Backup
#+begin_src emacs-lisp
(setq make-backup-files nil)
#+end_src

Make life a little bit more easier
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
(setq echo-keystrokes 0.1)
#+end_src

Full screen, and server
#+begin_src emacs-lisp
(toggle-frame-fullscreen)
(unless (daemonp) (server-mode t))
#+end_src

Garbage Collection
#+begin_src emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+end_src

Danger Scripts
#+begin_src emacs-lisp
(put 'narrow-to-region 'disabled nil)
(put 'dired-find-alternate-file 'disabled nil)
#+end_src

Make shell not to repeat commands
#+begin_src emacs-lisp
(setq comint-process-echoes t)
#+end_src

Set the font to a comfortable level
#+begin_src emacs-lisp
(set-face-attribute 'default nil :height 130)
(setq-default line-spacing 1)
(set-frame-font "Hack 13" nil t)
#+end_src

Dired stuffs
#+begin_src emacs-lisp
(setq dired-dwim-target t)
#+end_src

# Zone out 
# #+begin_src emacs-lisp
#   (zone-when-idle 600)
# #+end_src

Unicode character support
#+begin_src emacs-lisp
(require 'unicode-fonts)
(setq unicode-fonts-block-font-mapping
      '(("Emoticons"
	 ("Apple Color Emoji" "Symbola" "Quivira")))
      unicode-fonts-fontset-names '("fontset-default"))
(unicode-fonts-setup)
#+end_src

Don't kill emacs without confirming
#+begin_src emacs-lisp
(setq confirm-kill-emacs 'y-or-n-p)
#+end_src

Show alerts in notifier
#+begin_src emacs-lisp
(setq alert-default-style 'osx-notifier)
#+end_src

Easier marking for TMM
#+begin_src emacs-lisp
(defun push-mark-no-activate ()
  "Pushes `point' to `mark-ring' and does not activate the region
   Equivalent to \\[set-mark-command] when \\[transient-mark-mode] is disabled"
  (interactive)
  (push-mark (point) t nil)
  (message "Pushed mark to ring"))
#+end_src

** Dashboard
#+begin_src emacs-lisp
(dashboard-setup-startup-hook)
;; Set the title
(setq dashboard-banner-logo-title "Dashboard")

;; Set the banner
(setq dashboard-startup-banner "~/.emacs.d/external/t9-logo.png")
(setq dashboard-items '((recents  . 5)
                        (agenda . 10)
                        (projects . 5)
                        (bookmarks . 5)))
#+end_src

** Date and Time 
Have time displayed in status bar
#+begin_src emacs-lisp
(setq display-time-string-forms
       '((propertize (concat dayname " " day  " "  monthname " " 12-hours ":" minutes " "  am-pm)
 		    'face 'bold)))

#+end_src

** Display battery
Disabled as it has started taking time to update
#+begin_comment
    (require 'battery)
    (defun my/battery-mode-line () (let* ((bat (read (cdr (assoc 112 (funcall battery-status-function)))))
        (index (cl-position-if (lambda(e) (> bat e)) '(85 75 50 35 15 7 2 -1)))
        (charging (if (string-match-p "charging" (format "%s" (funcall battery-status-function))) "⚡" ""))
        (symbol (nth index '("[+++]" "[++-]" "[++ ]" "[+- ]" "[+  ]" "[-  ]" "[!  ]" "[.  ]")))
        (color (nth index (mapcar (lambda(c) (apply 'color-rgb-to-hex c)) (color-gradient '(0.3 1 0.2) '(1 0.2 0.1) 8)))))
      (propertize (concat symbol charging " " (number-to-string bat) "%% ") 'face (list :foreground color :weight 'bold))))
#+end_comment

** Python
Setup python venv with conda
#+begin_src emacs-lisp

(venv-initialize-interactive-shells) ;; if you want interactive shell support
(venv-initialize-eshell) ;; if you want eshell support
(setq venv-location "~/.miniconda/envs")
(setenv "WORKON_HOME" "~/.miniconda/envs")

#+end_src

** Jupyter Notebooks
Set jupyter executable path and Notebook path
#+begin_src emacs-lisp
(setq ein:jupyter-default-server-command "~/.local/bin/jupyter"
ein:jupyter-default-notebook-directory "~/Documents/Notebook")
#+end_src

Enable in-lined images in EIN
#+begin_src emacs-lisp
(setq ein:output-area-inlined-images t)
#+end_src

** EMMS

Constants and File Paths
#+begin_src emacs-lisp
(setq default-playlist "~/Documents/Work.m3u")
(setq emms-playlist-buffer-name "*EMMS*")
#+end_src

Basic Setup
#+begin_src emacs-lisp
  (emms-standard)
  (emms-default-players)
  (add-to-list 'emms-player-list 'emms-player-mpv)

  (emms-mode-line 1)

  (emms-add-playlist default-playlist)
  (emms-shuffle)
#+end_src
#+begin_src emacs-lisp
  (defun my/reload-playlist ()
    (interactive)
    (emms-play-playlist default-playlist)
    (emms-shuffle))
#+end_src

Fix the mode-line to just the Track name
#+begin_src emacs-lisp
  (setq emms-mode-line-mode-line-function
        (lambda nil
          (propertize " [♫]" 'face (list :foreground "#8080f0" :weight 'bold))))
#+end_src

** TRAMP
#+begin_src emacs-lisp
(defun add-ssh-agent-to-tramp ()
  (cl-pushnew '("-A")
              (cadr (assoc 'tramp-login-args
                           ; if on Windows using Putty with Pageant,
                           ; replace "ssh" with "plink"
                           (assoc "ssh" tramp-methods)))
              :test #'equal))
(add-ssh-agent-to-tramp)
#+end_src

** eShell

Pager setup

#+begin_src emacs-lisp
(setenv "PAGER" "cat")
#+end_src

Basic sanity setup
#+begin_src emacs-lisp
(setq eshell-save-history-on-exit t)
(add-hook 'eshell-mode-hook
            (lambda ()
              (add-to-list 'eshell-visual-commands "ssh")
              (add-to-list 'eshell-visual-commands "tail")
              (add-to-list 'eshell-visual-commands "htop")))
#+end_src


GIT
#+begin_src emacs-lisp
(defun eshell/gst (&rest args)
    (magit-status (pop args) nil)
    (eshell/echo))   ;; The echo command suppresses output

(defun my/epe-git-staged ()
  "Return number of staged files"
  (if (string-match "0"
                    (shell-command-to-string "git diff --cached --numstat | wc -l"))
      "" epe-git-dirty-char))

(defun my/epe-git-dirty ()
  "Return number of staged files"
  (if (string-match "0"
                    (shell-command-to-string "git diff --numstat | wc -l"))
      "" epe-git-dirty-char))

(defun my/epe-git-untracked ()
  (if (epe-git-untracked-p) epe-git-untracked-char ""))

(defun my/git-commit-count () 
  (let ((unpushed (epe-git-unpushed-number)))
                 (if (= unpushed 0) ""
                   (concat ":" (number-to-string unpushed)))))

#+end_src

Eshell [[https://www.masteringemacs.org/article/complete-guide-mastering-eshell#to-pseudo-devices][re-directions]]


The usual redirection rules like overwrite (~>~) and append (~>>~) apply here.

~echo $PATH > #<buffer *scratch*>~ 
To Buffers

~/dev/eshell~
Prints the output interactively to Eshell.

~/dev/null~
Sends the output to the NULL device.

~/dev/clip~
Sends the output to the clipboard.

~/dev/kill~
Sends the output to the kill ring.



Eshell theme and formating

#+begin_src emacs-lisp
(defun my/epe-theme-lambda ()
  "A eshell-prompt lambda theme."
  (setq eshell-prompt-regexp "^[^#\nλ]*[#λ] ")
  (concat
   (when (epe-remote-p)
     (epe-colorize-with-face
      (concat (epe-remote-user) "@" (epe-remote-host) " ")
      'epe-remote-face))
   (let ((env-current-name (or (get-venv-name)
                               (bound-and-true-p conda-env-current-name))))
     (when (and epe-show-python-info (bound-and-true-p env-current-name))
       (epe-colorize-with-face (concat "(" env-current-name ") ") 'epe-venv-face)))
   (let ((f 'epe-abbrev-dir-name))
     (epe-colorize-with-face (funcall f (eshell/pwd)) 'epe-dir-face))
   (when (epe-git-p)
     (concat " ["
      (epe-colorize-with-face (epe-git-branch) 'epe-git-face) " "
      (epe-colorize-with-face (my/epe-git-staged) '(:foreground "#3C3"))
      (epe-colorize-with-face (my/epe-git-dirty) '(:foreground "Orange"))
      (epe-colorize-with-face (my/epe-git-untracked) '(:foreground "#C33"))
      (epe-colorize-with-face (my/git-commit-count) 'epe-git-face) "]"))
   (epe-colorize-with-face " λ" 'epe-symbol-face)
   (epe-colorize-with-face (if (= (user-uid) 0) "#" "") 'epe-sudo-symbol-face)
   " "))
#+end_src

#+begin_src emacs-lisp
  (with-eval-after-load "esh-opt"
    (setq eshell-highlight-prompt nil
          eshell-prompt-function 'my/epe-theme-lambda
          epe-git-dirty-char "●"
          epe-git-untracked-char "●"))

#+end_src


Wrapper function to update ~venv-current-name~ whenever venv is activated or deactivate
#+begin_src emacs-lisp
  (defun my/pyvenv-workon () 
    (interactive)
    (call-interactively #'pyvenv-workon)
    (setq venv-current-name (get-venv-name)))

#+end_src

#+begin_src emacs-lisp
  (defun my/pyvenv-deactivate () 
    (interactive)
    (call-interactively #'pyvenv-deactivate)
    (setq venv-current-name (get-venv-name)))

#+end_src


#+begin_src emacs-lisp
(defun get-venv-name ()
  (let* ((virtual-env (split-string (car process-environment) "=")))
	 (if (equalp (first virtual-env) "VIRTUAL_ENV") (car (last (split-string (car (last virtual-env)) "/"))))))
#+end_src

** Functions
Launch Process with custom buffer name
#+begin_src emacs-lisp
(defun my/launch-process (name buffer-name process &rest args) 
(apply #'start-process name buffer-name process args)
(with-current-buffer buffer-name
        (local-set-key (kbd "C-c C-c") (lambda () (interactive) (kill-process))))
)
#+end_src

** Custom Minor Modes
Sensitive Mode
#+begin_src emacs-lisp
  (setq sensitive-extensions '())
  (define-minor-mode sensitive-mode
    "For sensitive files like password lists.
  It disables backup creation and auto saving.

  With no argument, this command toggles the mode.
  Non-null prefix argument turns on the mode.
  Null prefix argument turns off the mode."
    ;; The initial value.
    nil
    ;; The indicator for the mode line.
    " Sensitive"
    ;; The minor mode bindings.
    nil
    (if (symbol-value sensitive-mode)
        (progn
    ;; disable backups
    (set (make-local-variable 'backup-inhibited) t)	
    ;; disable auto-save
    (if auto-save-default
            (progn
              (auto-save-mode -1)
              (auto-save-visited-mode -1))))
      ;resort to default value of backup-inhibited
      (kill-local-variable 'backup-inhibited)
      (if auto-save-default
            (progn
              (auto-save-mode t)
              (auto-save-visited-mode t)))))
#+end_src

* Global Modes
** Global 

#+begin_src emacs-lisp
  ;; (global-display-line-numbers-mode t)
  (auto-save-visited-mode t)
  (global-visual-line-mode t)

  (helm-mode 1)
  (pyvenv-mode 1)
  (global-undo-tree-mode)
  (electric-pair-mode t)
  (rainbow-delimiters-mode 1)
  (show-paren-mode 1)
  (setq show-paren-delay 0)
  (wrap-region-global-mode 1)
  (delete-selection-mode 1)
  (org-super-agenda-mode 1)
  (customize-set-variable 'helm-ff-lynx-style-map t)

  (setq-default display-line-numbers-width 2
		display-line-numbers-widen t
		tab-width 2
		indent-tabs-mode nil)

  (display-time-mode 1)
  (org-roam-mode 1)
  (org-notify-start)
#+end_src

Disable line numbers in some buffers
#+begin_src emacs-lisp
(defun display-line-numbers-disable-hook ()
  "Disable display-line-numbers locally."
  (display-line-numbers-mode 0))

(add-hook 'maggit-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'org-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'dashboard-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'pdf-tools-enabled-hook 'display-line-numbers-disable-hook)
(add-hook 'doc-view-mode-hook 'display-line-numbers-disable-hook)
(add-hook 'vterm-mode-hook 'display-line-numbers-disable-hook)
#+end_src

Disable visual line mode in some buffers
#+begin_src emacs-lisp

(defun disable-visual-line-mode ()
  "Disable display-line-numbers locally."
   (visual-line-mode -1))

(add-hook 'minibuffer-setup-hook 'disable-visual-line-mode)

#+end_src

Org export support
#+begin_src emacs-lisp
(setq doc-view-ghostscript-program "/usr/local/bin/gs")
#+end_src

Image view mode
#+begin_src emacs-lisp
(eval-after-load 'image+ '(imagex-global-sticky-mode 1))
#+end_src

Disable new line mode for csv files as it defeats the purpose of align items
#+begin_src emacs-lisp
(add-hook 'csv-mode-hook
          (lambda ()
            (visual-line-mode 1)
            (toggle-truncate-lines 1)))

(add-hook 'deft-mode-hook
          (lambda ()
            (visual-line-mode 1)
            (toggle-truncate-lines 1)))
#+end_src

** EPUB mode setting
Basic setting
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(setq nov-text-width t)
(add-hook 'nov-mode-hook 'visual-line-mode)
(add-hook 'nov-mode-hook 'visual-fill-column-mode)
#+end_src


#+begin_src emacs-lisp
(require 'justify-kp)
(setq nov-text-width t)

(defun my-nov-window-configuration-change-hook ()
  (my-nov-post-html-render-hook)
  (remove-hook 'window-configuration-change-hook
               'my-nov-window-configuration-change-hook
               t))

(defun my-nov-post-html-render-hook ()
  (if (get-buffer-window)
      (let ((max-width (pj-line-width))
            buffer-read-only)
        (save-excursion
          (goto-char (point-min))
          (while (not (eobp))
            (when (not (looking-at "^[[:space:]]*$"))
              (goto-char (line-end-position))
              (when (> (shr-pixel-column) max-width)
                (goto-char (line-beginning-position))
                (pj-justify)))
            (forward-line 1))))
    (add-hook 'window-configuration-change-hook
              'my-nov-window-configuration-change-hook
              nil t)))

(add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)
#+end_src

** Prog-Mode

Standard Indent value to 2
#+begin_src emacs-lisp
(setq-default standard-indent 2)
#+end_src

Programming Mode Hooks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'prog-mode-hook #'yafolding-mode)
  (add-hook 'json-mode-hook #'yafolding-mode)
  (add-hook 'nxml-mode-hook #'yafolding-mode)
  (add-hook 'bibtex-mode-hook #'yafolding-mode)
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
  ;; (add-hook 'prog-mode-hook 'linum-mode)


#+end_src

*** JavaScript
JavaScript specific setups
#+begin_src emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
    (add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
    (add-to-list 'interpreter-mode-alist '("node" . js2-mode))
    (setq js-indent-level 2
          web-mode-code-indent-offset 2
          web-mode-markup-indent-offset 2
          web-mode-css-indent-offset 2)
#+end_src

CSS
#+begin_src emacs-lisp
(setq css-indent-offset 2)
#+end_src

*** Python
Python Specific Setups
#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'anaconda-mode)
(add-hook 'python-mode-hook 'anaconda-eldoc-mode)
(add-hook 'python-mode-hook (lambda () (auto-complete-mode -1)))
#+end_src

Setting iPython as the default REPL for python
#+begin_src emacs-lisp
(setq python-shell-interpreter "ipython"
python-shell-interpreter-args "--simple-prompt -i")

(add-hook 'inferior-python-mode-hook 'no-trailing-whitespace)
(add-hook 'inferior-python-mode-hook
          '(lambda ()
             (setq-local ml-interactive? t)))
#+end_src

Ensure that each project has its own python shell and Change the virtual environment according to the project
#+begin_src emacs-lisp
(add-hook 'elpy-mode-hook (lambda () (elpy-shell-set-local-shell (elpy-project-root))))
(pyvenv-tracking-mode)
#+end_src
*** LISP
#+begin_src emacs-lisp
(load (expand-file-name "~/.quicklisp/slime-helper.el"))
(setq inferior-lisp-program "sbcl")
#+end_src

** Projectile
Enable Projectile Globally
#+begin_src emacs-lisp
(projectile-global-mode)
(helm-projectile-toggle 1)
(setq projectile-enable-caching t)
#+end_src

Projectile default search path and indexing
#+begin_src emacs-lisp
(setq projectile-project-search-path '("~/Documents/Projects/"))
(setq projectile-indexing-method 'alien)
#+end_src


Bind switch project to =helm-projectile=
#+begin_src emacs-lisp
(setq projectile-switch-project-action 'helm-projectile)
#+end_src

** Shell
Setup shell setting to work with zsh
#+begin_src emacs-lisp
(setq explicit-shell-file-name "/bin/zsh")
(setq shell-file-name "zsh")
(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
(setenv "SHELL" shell-file-name)
(add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-to-list 'comint-output-filter-functions 'ansi-color-process-output)
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
#+end_src

#+begin_src emacs-lisp
(setq ac-modes (delq 'python-mode ac-modes))
#+end_src

** Flycheck
#+begin_src emacs-lisp
 (when (require 'flycheck nil t)
   (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
   (add-hook 'elpy-mode-hook 'flycheck-mode))
#+end_src

Use aspell to fix my mistakes
#+begin_src emacs-lisp
(setq flyspell-issue-welcome-flag nil)
(if (eq system-type 'darwin)
    (setq-default ispell-program-name "/usr/local/bin/aspell")
  (setq-default ispell-program-name "/usr/bin/aspell"))
(setq-default ispell-list-command "list")

#+end_src

*** Dictionary Definitions: 
Get the definition of the word at point from wiktionary
#+begin_src emacs-lisp
  (autoload 'ispell-get-word "ispell")

  (defun lookup-word (word)
    (interactive (list (save-excursion (car (ispell-get-word nil)))))
    (message "Looking up meaning of %s" word)
    (my/define-word word)
    )
#+end_src

If the underlying api stops working Use =(browse-web (format "https://api.dictionaryapi.dev/api/v1/entries/en/%s" word))= instead

#+begin_src emacs-lisp
  (defun my/define-word (word) 
    (kill-buffer (get-buffer-create "*define-word*"))
    (with-current-buffer (get-buffer-create "*define-word*")
      (erase-buffer)
      (insert (concat "Word: " word "\n\n")))
    (request
      (format "http://wordnik.com/words/%s" word)
      :parser  'define-word--parse-wordnik
      :success
      (cl-function (lambda (&key data &allow-other-keys)
                     (when data
                       (with-current-buffer (get-buffer-create "*define-word*")
                         (insert data)
                         (local-set-key (kbd "q") 'my/kill-this-buffer)
                         (read-only-mode 1)
                         (pop-to-buffer (current-buffer))))))
      :error
      (cl-function (lambda (&key error-thrown &allow-other-keys&rest _)
                     (message "Got error: %S" error-thrown)))
      :complete (lambda (&rest _) (message "Finished!"))
      :status-code '((400 . (lambda (&rest _) (message "Got 400.")))
                     (418 . (lambda (&rest _) (message "Got 418."))))))
#+end_src

** Markdown
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.mdown$" . markdown-mode))
(add-hook 'markdown-mode-hook
          (lambda ()
            (visual-line-mode t)
            (writegood-mode t)
            (flyspell-mode t)))

#+end_src

** Org
#+begin_src emacs-lisp
  (add-to-list 'sensitive-extensions "gpg")
  (add-to-list 'auto-mode-alist '("^\\*.org\\*$" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.trello$" . org-mode))

  (add-hook 'org-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name (current-buffer))))
              (when (and filename (string= "trello" (file-name-extension filename)))
              (org-trello-mode)))))


  (add-hook 'org-mode-hook 'org-indent-mode)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (add-hook 'org-mode-hook 'flyspell-mode)
  (add-hook 'org-mode-hook 'writegood-mode)
  (add-hook 'org-mode-hook 'org-password-manager-key-bindings)
  (add-hook 'org-mode-hook 'org-beamer-mode)
  (add-hook 'org-mode-hook 'org-bullets-mode)
  (add-hook 'org-mode-hook
          (lambda ()
            (let ((filename (buffer-file-name (current-buffer))))
              (if (and filename (member (file-name-extension filename) sensitive-extensions))
              (sensitive-mode) (sensitive-mode -1)))))
#+end_src

** Dumb Jump
Dumb jump lets me goto definitions easily using a dumb =ag= search
#+begin_src emacs-lisp
(dumb-jump-mode 1)
(setq dumb-jump-selector 'helm)
#+end_src

** Ontology
*** Turtle Format
Enable bindings for turtle format
#+begin_src emacs-lisp
(autoload 'ttl-mode "ttl-mode" "Major mode for OWL or Turtle files" t)
(add-hook 'ttl-mode-hook    ; Turn on font lock when in ttl mode
          'turn-on-font-lock)
(setq auto-mode-alist
      (append
       (list
        '("\\.n3" . ttl-mode)
        '("\\.ttl" . ttl-mode))
       auto-mode-alist))
#+end_src

* Org
** Global
Time tracking on tasks
#+begin_src emacs-lisp
  (setq org-clock-persist 'history)
  (setq org-startup-folded t)
  (org-clock-persistence-insinuate)
  (setq org-log-into-drawer t)
#+end_src

Image Scaling 
#+begin_src emacs-lisp
(setq org-image-actual-width nil)
#+end_src

Allow alphabets ‘a.’, ‘A.’, ‘a)’ and ‘A) as list elements:
#+begin_src emacs-lisp
(setq org-list-allow-alphabetical t)
#+end_src

Allow helm completion for tags
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
            (lambda () (add-to-list 'helm-completing-read-handlers-alist '(org-set-tags-command))))

#+end_src

Org-bullet customization
#+begin_src emacs-lisp
(setq org-bullets-bullet-list '("◉" "◎" "○" "►" "*"))
#+end_src

Org ordered dependencies 
#+begin_src emacs-lisp
(setq-default org-enforce-todo-dependencies t)
#+end_src

Themes, look and feel
#+begin_src emacs-lisp
(setq org-hide-emphasis-markers t)

;; Font
(custom-theme-set-faces 'user `(org-document-title ((t (:foreground "#3282b8" :height 1.3 :underline nil)))))

(setq org-priority-faces '((?A . (:foreground "#F0DFAF" :weight bold))
                           (?B . (:foreground "LightSteelBlue"))
                           (?C . (:foreground "OliveDrab"))))

#+end_src

Wrap region for word formatting
#+begin_src emacs-lisp
(wrap-region-add-wrappers
   '(("*" "*" nil org-mode)
     ("~" "~" nil org-mode)
     ("/" "/" nil org-mode)
     ("=" "=" "+" org-mode)
     ("_" "_" nil org-mode)
     ("`" "`" nil prog-mode)
     ("$" "$" nil (org-mode latex-mode))))
#+end_src

** Exo-cortex
A place to store and remember everything that I can't burden my brain with thinking about. 
*** File Organization
- Journal/Micro plan :: Used to plan the day. Journal captures the day's schedule, meetings and work task
#+begin_src emacs-lisp
(setq journal-file-path "~/Documents/org-notes/Dropbox/org-notes/today.org")
#+end_src

- Capture :: All unscheduled sudden surges of things which I remember get captured into this file. Mostly things here are without a schedule or deadline, which need to refiling and revisiting sometime in the future. Also serves as the Bookmark collection of websites, videos, books, courses and podcasts. 
#+begin_src emacs-lisp
(setq capture-file-path "~/Documents/org-notes/Dropbox/org-notes/capture.org")
(setq org-default-notes-file capture-file-path)
#+end_src

- Inbox :: All the scheduled tasks go into this file. If something gets scheduled from the capture file, they move into inbox. 
#+begin_src emacs-lisp
(setq tasks-file-path "~/Documents/org-notes/Dropbox/org-notes/inbox.org")
#+end_src

- Home Tasks :: Its better to keep work and home separate. So a separate home task file
#+begin_src emacs-lisp
(setq home-tasks-file-path "~/Documents/org-notes/Dropbox/org-notes/home/tasks.org")
#+end_src

- References :: All the papers which need to be read, are captured into references.bib, whose offshot gets captured in references. They get planned and scheduled, and at max may be a part of a project. The section in references only moves to Projects, and never to Inbox.
#+begin_src emacs-lisp
(setq references-file-path "~/Documents/org-notes/research/bibliography/references.org")
#+end_src

- Personal Library :: A collection of novels - fictional and non fictional to read. Its always good to have a habit for reading

#+begin_src emacs-lisp
(setq personal-library-file-path "~/Documents/org-notes/research/reading-list/library.org")
#+end_src

- Projects :: This makes sure that everything I start gets done. Things move from capture into projects, gets scheduled and mostly has notes and sub items - scheduled or unscheduled. Nothing gets added to projects without having lived in capture
#+begin_src emacs-lisp
(setq projects-file-path "~/Documents/org-notes/Dropbox/org-notes/projects.org")
#+end_src

**** ORG-Agenda: 
All the above mentioned files just form a part of the bigger agenda.
#+begin_src emacs-lisp
(setq org-agenda-files (list tasks-file-path
projects-file-path
capture-file-path
journal-file-path
references-file-path
personal-library-file-path
home-tasks-file-path
"~/Documents/org-notes/exocortex/daily.org"
))
#+end_src

*** Org TODO cycles

After multiple iterations of the TODO cycles, finally decided on using a simple list of TODOS, and to rely more on tags to mark the kind of TODO

- TODO :: Anything that needs to be done. Mostly without a schedule or a deadline or with an arbitrary future schedule, but must be picked up on priority
- SCHEDULED :: Things move from TODO to SCHEDULED, when a schedule or a deadline is attached to them and it has been slotted to be picked up.
- INPROGRESS :: Currently in play
- HOLD :: Things which had been picked up but have been put on hold due to
  1. Further updates or conflicting requirement with some other task
  2. Is waiting on a feedback from a second person
- DONE :: Finished, and ready to be archived.
- CANCELLED :: No more important. Ready to be archived.
- RE-VISIT :: Things done, but need a second opinion
- POSTPONED :: Not important at this moment. Can't be archived until DONE or CANCELLED

#+begin_src emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t)" "SCHEDULED(s!)" "HOLD(h!)"  "INPROGRESS(i!)" "|" "DONE(d!)" "CANCELLED(c!)" )
          (sequence "|" "POSTPONED(P!)" "RE-VISIT(v)")
          (sequence "⌛HOLD" "⌚INPROGRESS" "|")))

  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "#ff39a3" :weight bold))
          ("SCHEDULED" . (:foreground "#81D8D1"  :weight bold))
          ("HOLD" . (:foreground "#ff9a00" :weight bold))
          ("SHELVED" . (:foreground "#ff9a00" :weight bold))
          ("⌛HOLD" . (:foreground "#ff9a00" :weight bold))
          ("INPROGRESS" . (:foreground "#ffdd00" :weight bold))
          ("READING" . (:foreground "#ffdd00" :weight bold))
          ("⌚INPROGRESS" . (:foreground "#ffdd00" :weight bold))
          ("CANCELLED" . (:foreground "white" :background "#4d4d4d" :weight bold))
          ("RE-VISIT" . (:foreground "#88ddee" :background "#454545" :weight bold))
          ("POSTPONED" . "#008080")))
#+end_src

** PDF view
Install PDF tools 
#+begin_src emacs-lisp
(pdf-tools-install)
#+end_src

Always open PDF inside EMACS itself
#+begin_src emacs-lisp

(add-to-list 'org-file-apps 
             '("\\.pdf\\'" . emacs))
(add-to-list 'auto-mode-alist '("\\.ps\\'" . doc-view-mode))
#+end_src

Fine grained zoom with + and - to 10% 
#+begin_src emacs-lisp
(setq pdf-view-resize-factor 1.1)
#+end_src

Dark Mode always
#+begin_src emacs-lisp
  (add-hook 'pdf-tools-enabled-hook 'pdf-view-midnight-minor-mode)
  (setq-default pdf-view-display-size 'fit-width)
  (setq pdf-view-midnight-colors '("#AAAA99" . "#282828"))
  (setq-default pdf-view-display-size 'fit-page)
#+end_src

#+RESULTS:
: fit-page

Remember the last read page
#+begin_src emacs-lisp
(add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode)
(setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")
#+end_src

** Org-agenda
Get a view of month ahead instead of the default 2 weeks.
#+begin_src emacs-lisp
(setq-default org-deadline-warning-days 30)
(setq-default org-habit-graph-column 80)
#+end_src

Org-super-agenda
#+begin_src emacs-lisp
(defun get-fortnight-date ()
  (let* ((now (decode-time))
         (fortnight (copy-sequence now)))
  (cl-incf (nth 3 fortnight) 14)
  (format-time-string "%Y-%m-%d" (apply #'encode-time fortnight))))
(let (target-date (get-fortnight-date))
(setq org-agenda-time-grid '((daily today require-timed)
 (800 1000 1200 1400 1600 1800 2000)
 "......" "----------------")
        org-agenda-skip-scheduled-if-done t
        org-agenda-skip-deadline-if-done t
        org-agenda-include-deadlines t
        org-agenda-include-diary nil
        org-agenda-use-time-grid t
        org-agenda-block-separator nil
        org-agenda-compact-blocks t
        org-agenda-start-with-log-mode t)

    (setq org-super-agenda-groups
           '((:log t)
             (:name "Schedule"
                    :time-grid t)
             (:name "Today "
                    :scheduled today)
             (:name "Due Today"
                    :deadline today)
             (:name "Habit Tracker "
                    :habit t)
             (:name "Papers"
                    :tag "@article")
             (:name "Books"
                    :tag "@book")
             (:name "Courses"
                    :tag "@course")
             (:name "Birthdays & Anniversaries"
                    :tag ("@anniversary" "@birthday")
                    :order 98)
             (:name "Overdue"
                    :deadline past)
             (:name "Bills and Payments"
                    :tag "@bills_and_payments")
             (:name "Important"
                    :priority ("A" "B"))
             (:name "Inprogress"
                    :todo "INPROGRESS")
             (:name "Due soon"
                    :deadline future)
             (:name "On Hold"
                    :todo "HOLD"
                    :order 7)
             (:name "Shopping List"
                    :tag "@shopping_list")
             (:name "Scheduled earlier"
                    :scheduled past))))

#+end_src

Display TODO list in a formatted manner
#+begin_src emacs-lisp
  (add-to-list 'org-agenda-custom-commands
               '("t" "All TODOs groups by category" alltodo ""
                 ((org-super-agenda-groups '((:auto-category t))))))
  (add-to-list 'org-agenda-custom-commands
               '("p" "Projects" tags-todo "@inbox|@projects"
                 ((org-super-agenda-groups '((:auto-category t))))))
  (add-to-list 'org-agenda-custom-commands
               '("c" "Captured Tasks" tags-todo "@tasks|@second_brain"
                 ((org-super-agenda-groups '((:auto-category t))))))
  (add-to-list 'org-agenda-custom-commands
               '("r" "Reading" tags-todo "@library|@reference"
                 ((org-super-agenda-groups '((:auto-category t))))))
  (add-to-list 'org-agenda-custom-commands
               '("l" "Local" tags-todo "@local"
                 ((org-super-agenda-groups '((:auto-category t))))))

#+end_src


#+begin_src emacs-lisp
  (require 'org-agenda)
  (setq org-agenda-prefix-format '(
   (agenda  . " %i  %-12:c%?-12t% s") ;; file name + org-agenda-entry-type
    ;;(agenda  . "%-12c%?-12t% s")
    (timeline . " % s")
    (todo  . " %?-12:c")
    (tags  . " %i %-12:c")
    (search . " %i %-12:c")))
#+end_src

Disable visual line mode in agenda view as it wraps the tags to new line
#+begin_src emacs-lisp
(add-hook 'org-agenda-mode-hook
          (lambda ()
            (visual-line-mode 1)
            (toggle-truncate-lines 1)))
#+end_src

Display agenda in a full window view instead of a frame view
#+begin_src emacs-lisp
(setq-default org-agenda-window-setup 'only-window)
#+end_src

** Org-clock

Idle Time
#+begin_src emacs-lisp
(setq org-clock-idle-time 15)
#+end_src

Log on close
#+begin_src emacs-lisp
(setq org-log-done 'time)
#+end_src
Use ~C-c C-c C-i~ to clock in. This is to support an independent flow of ~INPROGRESS~ without clocking.
Automatically pause the clock when the task moves to ~HOLD~ from ~⌚INPROGRESS~
#+begin_src emacs-lisp
  (defun my/org-clock-in-if-inprogress ()
    "Pause the clock when task goes into HOLD mode."
    (when (and (string= org-state "HOLD")
               (string= org-last-state "⌚INPROGRESS"))
      (org-clock-out)))

  (add-hook 'org-after-todo-state-change-hook
            'my/org-clock-in-if-inprogress)
#+end_src

Custom
#+begin_src emacs-lisp
  (setq-default org-clock-clocktable-default-properties
                '(:block day :maxlevel 3 :scope agenda :link t :compact t :formula %
                         :step day :fileskip0 t :stepskip0 t :narrow 80
                         :properties ("CLOCKSUM" "CLOCKSUM_T" "TODO"))
                org-clock-in-switch-to-state "⌚INPROGRESS"
                org-clock-out-switch-to-state "⌛HOLD"
                org-clock-continuously nil
                org-clock-persist-query-resume nil
                org-clock-out-remove-zero-time-clocks t
                org-clock-report-include-clocking-task t)
#+end_src

*** TODO Deadlines based on Effort estimation
#+begin_src emacs-lisp
(defun org-schedule-effort ()
(interactive)
  (save-excursion
    (org-back-to-heading t)
    (let* (
        (element (org-element-at-point))
        (effort (org-element-property :Effort element))
        (scheduled (org-element-property :scheduled element))
        (ts-year-start (org-element-property :year-start scheduled))
        (ts-month-start (org-element-property :month-start scheduled))
        (ts-day-start (org-element-property :day-start scheduled))
        (ts-hour-start (org-element-property :hour-start scheduled))
        (ts-minute-start (org-element-property :minute-start scheduled)) )
      (org-schedule nil (concat
        (format "%s" ts-year-start)
        "-"
        (if (< ts-month-start 10)
          (concat "0" (format "%s" ts-month-start))
          (format "%s" ts-month-start))
        "-"
        (if (< ts-day-start 10)
          (concat "0" (format "%s" ts-day-start))
          (format "%s" ts-day-start))
        " "
        (if (< ts-hour-start 10)
          (concat "0" (format "%s" ts-hour-start))
          (format "%s" ts-hour-start))
        ":"
        (if (< ts-minute-start 10)
          (concat "0" (format "%s" ts-minute-start))
          (format "%s" ts-minute-start))
        "+"
        effort)) )))

#+end_src

#+RESULTS:
: org-schedule-effort

** Files
List of global org files
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org-notes")
(setq secrets-file-path "~/Documents/Personal/secrets.org.gpg")
(setq secrets-file (cons 'file secrets-file-path))
(set-register ?s secrets-file)
(set-register ?r (cons 'file references-file-path))
(set-register ?p (cons 'file projects-file-path))
(set-register ?b (cons 'file capture-file-path))
(set-register ?h (cons 'file home-tasks-file-path))
(set-register ?t (cons 'file journal-file-path))



(setq org-agenda-file-regexp "\\`[^.].*\\.org'\\|[0-9]+$")
(add-hook 'diary-display-hook 'diary-fancy-display)

(setq org-refile-targets '((projects-file-path :maxlevel . 3)
                           (home-tasks-file-path :maxlevel . 2)
                           (references-file-path :maxlevel . 2)
                           (tasks-file-path :level . 1)
                           (capture-file-path :maxlevel . 3)))


#+end_src

** Org Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (R . t)
     (prolog . t)
     (lisp . t)
     (shell . t)
     (elixir . t)
     (ein . t)))

  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("python" "lisp" "emacs-lisp" "clojure" "prolog" "sh" "R" "elixir"))))

  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)

#+end_src

#+RESULTS:
: my-org-confirm-babel-evaluate

** Org latex
Add LATEX to path

#+begin_src emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/Library/TeX/texbin/"))
#+end_src
#+begin_example emacs-lisp
  (setq org-latex-pdf-process
        '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
  (add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
  (add-to-list 'org-latex-default-packages-alist
               '("linktocpage,pdfstartview=FitH,colorlinks,
  linkcolor=blue,anchorcolor=blue,
  citecolor=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
                 "hyperref" nil)
               t)

  (setq org-latex-prefer-user-labels t)
#+end_example

#+begin_src emacs-lisp
(setq org-latex-pdf-process
      '("pdflatex -interaction nonstopmode -output-directory %o %f"
	"bibtex %b"
	"pdflatex -interaction nonstopmode -output-directory %o %f"
	"pdflatex -interaction nonstopmode -output-directory %o %f"))
(setq bibtex-dialect 'biblatex)
#+end_src

Add to global tex-compile commands
#+begin_src emacs-lisp
(require 'tex-mode) 
(add-to-list 'tex-compile-commands '("latexmk -pdflatex='pdflatex -interaction nonstopmode' -pdf -bibtex -f %f"))
#+end_src

** Org ref
Search through bibtex reference using helm reference
#+begin_src emacs-lisp
(defun my/helm-bibtex-publications (&optional arg)
  "Search BibTeX entries authored by “Jane Doe”.

With a prefix ARG, the cache is invalidated and the bibliography reread."
  (interactive "P")
  (helm-bibtex arg nil ""))

#+end_src

Manage notes using helm bibtex
#+begin_src emacs-lisp
  ;; Tell org-ref to let helm-bibtex find notes for it
  (setq org-ref-notes-function 'org-ref-notes-function-many-files)
#+end_src

Or Supply a lambda to tell it what to do
#+begin_src emacs-lisp
  ;; (setq org-ref-notes-function (lambda (thekey)
  ;; 	(let ((bibtex-completion-bibliography (org-ref-find-bibliography)))
  ;; 	  (bibtex-completion-edit-notes
  ;; 	   (list (car (org-ref-get-bibtex-key-and-file thekey)))))))
#+end_src


Function to Update bib files when adding new one. 
#+begin_src emacs-lisp
  (defun update-bibfiles () 
    (interactive)
    (let* ((bib-path "~/Documents/org-notes/research/bibliography/" ) (bib-files 
           (mapcar 
            (lambda (x) (concat bib-path x )) 
            (directory-files bib-path nil "bib$"))))

      (setq bibtex-completion-bibliography bib-files
            reftex-default-bibliography bib-files
            org-ref-default-bibliography bib-files)))

#+end_src

Org-ref Files 
#+begin_src emacs-lisp
    (setq org-ref-pdf-directory "~/Documents/org-notes/research/bibliography/bibtex-pdfs/")
    (update-bibfiles)
#+end_src

*** Bibtex

#+begin_src emacs-lisp
(setq bibtex-completion-library-path "~/Documents/org-notes/research/bibliography/bibtex-pdfs"
      bibtex-completion-notes-path "~/Documents/org-notes/research/bibliography/helm-bibtex-notes"
      bibtex-completion-pdf-field "File"
      bibtex-completion-pdf-symbol "⌘"
      bibtex-completion-notes-symbol "✎"
      bibtex-completion-additional-search-fields '(tags keywords))
(setq bibtex-completion-display-formats
      '((t . "${author:30} ${title:150} ${year:4} ${=has-pdf=:1}${=has-note=:1} ${=type=:7}")))
#+end_src

Org-ref header format to support PDF interleaving

#+begin_src emacs-lisp
  (setq bibtex-completion-notes-template-multiple-files "#+TITLE: ${title} :: ${author-or-editor} (${year})\n#+ROAM_KEY: cite:${=key=}\n#+INTERLEAVE_PDF: ../bibtex-pdfs/${=key=}.pdf\n")
#+end_src

Add compatibility between interleave and org-noter
#+begin_src emacs-lisp
(setq org-noter-property-doc-file "INTERLEAVE_PDF"
      org-noter-property-note-location "INTERLEAVE_PAGE_NOTE")
#+end_src

Org-noter config
#+begin_src emacs-lisp
  (setq org-noter-always-create-frame nil)
  (setq org-noter-notes-search-path (list bibtex-completion-notes-path "."))
#+end_src

#+RESULTS:


Interleave notes folder 
#+begin_src emacs-lisp
(setq interleave-org-notes-dir-list (list bibtex-completion-notes-path "."))
#+end_src

Interleave split lines

#+begin_src emacs-lisp
(setq interleave-split-lines 60)
#+end_src

** Org roam
Org-Roam setup to facilitate note taking for the research
#+begin_src emacs-lisp
(setq-default org-roam-directory (concat org-directory "/research"))
(setq org-roam-completion-system 'helm)
(setq org-roam-graph-exclude-matcher '("reference"))
#+end_src

Have a separate Notes folder for captures. Helps in keeping the thoughts clean
#+begin_src emacs-lisp
  (setq-default org-roam-capture-templates '(("d" "default" plain
    (function org-roam-capture--get-point)
    "%?" :file-name "notes/%<%Y%m%d%H%M%S>" :head "#+TITLE: ${title}\n#+ROAM_ALIAS: \"${slug}\"\n%K - %a\n%i\n
  " :unnarrowed t)
  ;; ("b" "bookends" plain (function org-roam-capture--get-point)
  ;;            "- tags :: [[open-ext:bookends://sonnysoftware.com/${bid}][Bookends link]]\n- reference :: ${fcite}\n\n%?"
  ;;            :file-name "exocortex/notes/${slug}"
  ;;            :head "#+TITLE: ${title}\n#+DATE: %<%Y-%m-%d>\n#+ROAM_KEY: ${ref}\n\
  ;; #+BID: ${bid}\n#+PDF_FILE: ${pdf}\n#+CATEGORY: article\n\n"
  ;;            :unnarrowed t
  ;;            :immediate-finish t)
  ))
#+end_src

Roam Server
#+begin_src emacs-lisp
(setq org-roam-server-port 9666)
#+end_src

Autolaunch firefox when ever org-roam-server keys are pressed

#+begin_src emacs-lisp
  (defun my/launch-org-roam-firefox(&optional args)
    (interactive "P")
    (if current-prefix-arg 
        (setq org-roam-server-mode nil) (setq org-roam-server-mode t))
    (when org-roam-server-mode
      (my/launch-process "roam-server-process" "*roam-server*" "/Applications/Firefox.app/Contents/MacOS/firefox" "--new-window" "http://localhost:9666/")))
#+end_src

*** Deft
#+begin_src emacs-lisp
(setq deft-directory (concat org-directory "/research"))

(setq deft-extensions '("org"))
(setq deft-default-extension "org")

(setq deft-text-mode 'org-mode)
(setq deft-use-filter-string-for-filename t)

(setq deft-recursive t)
(setq deft-auto-save-interval 0)
#+end_src

Deft new file name convention
#+begin_src emacs-lisp
(setq deft-file-naming-rules
      '((noslash . "-")
        (nospace . "-")
        (case-fn . downcase)))
#+end_src

** Org Present
#+begin_src emacs-lisp
  (add-hook 'org-present-mode-hook
            (lambda ()
              (org-present-big)
              (org-display-inline-images)
              (org-present-read-only)))
  (add-hook 'org-present-mode-quit-hook
            (lambda ()
              (org-present-small)
              (org-remove-inline-images)
              (org-present-read-write)))
#+end_src

** Capture Templates                                        :non_exec_block:

#+begin_src emacs-lisp
(setq org-capture-templates
      '(
#+end_src
*** Tasks
#+begin_src emacs-lisp

("t" "Todos")
("tt" "Task [capture]" entry
	 (file+headline capture-file-path "Tasks")
	 "* TODO %K - %a\n:PROPERTIES:\n:Effort:   %^{Effort}\n:END:\nSCHEDULED: %t\n%i\n%?\n")
#+end_src

Also the home tasks
#+begin_src emacs-lisp
("ts" "Shopping list [home]" checkitem
	 (file+headline home-tasks-file-path "Shopping")
	 "[ ] %i%? ")

("tr" "Reminder [home]" entry
	 (file+headline home-tasks-file-path "Non-Recurring")
	 "* TODO %i%?")
#+end_src

*** Capture
#+begin_src emacs-lisp
("c" "Capture")
("cb" "Book" entry
(file+headline capture-file-path "Books")
"* [[%^{url}][%^{title}]]  %^g
       :PROPERTIES:
       :TYPE: Book
       :END:
")
("cc" "Courses" entry
(file+headline capture-file-path "Courses")
"* TODO [[%^{url}][%^{title}]] %^g
       :PROPERTIES:
       :TYPE: Course
       :END:
")
("cm" "Miscelleneous" entry
(file+headline capture-file-path "Misc")
"* TODO %i%?")
("cv" "Videos" entry
(file+headline capture-file-path "Videos")
"* [[%^{url}][%^{title}]]  %^g
       :PROPERTIES:
       :TYPE: Video
       :END:
")
("cw" "Web URL" entry
(file+headline capture-file-path "Web")
"* [[%^{url}][%^{title}]]  %^g
       :PROPERTIES:
       :TYPE: Web
       :END:
")
#+end_src

*** Journal
#+begin_src emacs-lisp
("j" "Journal")
("jt" "Today" entry
(file+datetree+prompt journal-file-path)
   "* TODO %K %a\n:PROPERTIES:\n:Effort:   %^{Effort}\n:END:\nSCHEDULED: %t\n%i\n%?")
("jj" "Journal" entry
(file+datetree+prompt journal-file-path)
   "* %U %K - %a\n%i\n%?\n")
#+end_src

*** Reference Papers
Capture reference papers with a small help of =C-c r y=
#+begin_src emacs-lisp
("r" "Paper" entry
(file+headline references-file-path "Papers")
	 "*  %^g %i%?
     :PROPERTIES:
     :TYPE: Paper
     :END:
")
#+end_src

*** Secrets
#+begin_src emacs-lisp
	("s" "Secrets" entry
	 (file+headline secrets-file-path "Secrets")
	 "* [[%^{Link}][%^{Description}]]
 :PROPERTIES:
 :USERNAME: %^{Username}
 :PASSWORD: %^{Password}
 :END:
")
#+end_src

*** Closing remarks
#+begin_src emacs-lisp
))

(defun schedule-grocery-hook ()
  (if (string= (org-capture-get :description)
               "Shopping list [home]")
      (org-schedule 0 (format-time-string "%Y-%m-%d"))))

;; (add-hook 'org-capture-before-finalize-hook 'schedule-grocery-hook)
#+end_src

* Internet, Social, Feed Manager
** Elfeed
Feed reader setups
*** Configuration 
[[file:elfeed.org][Configuration Org]]
#+begin_src emacs-lisp
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/.emacs.d/elfeed.org")))
#+end_src
*** Bookmarks
All the bookmark loaders
#+begin_src emacs-lisp
(defun my/elfeed-outline-show-all ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-all"))

(defun my/elfeed-outline-show-daily ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-daily"))


(defun my/elfeed-outline-show-tech ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-tech"))

(defun my/elfeed-outline-art-and-music ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-artNmusic"))

(defun my/elfeed-outline-show-podcast ()
  (interactive)
  (bookmark-maybe-load-default-file)
  (bookmark-jump "elfeed-podcast"))
#+end_src

*** Customization
Custom functions to make life a little easier
**** Save state before Quit
#+begin_src emacs-lisp
;;write to disk when quiting
(defun my/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))
#+end_src
**** Mark the favourites
#+begin_src emacs-lisp
(defalias 'elfeed-toggle-star
  (elfeed-expose #'elfeed-search-toggle-all 'star))
#+end_src
**** Custom Colors
***** News
#+begin_src emacs-lisp
(defface daily-news
  '((t :foreground "#AFF"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(daily daily-news) elfeed-search-face-alist)
#+end_src
***** Podcasts
#+begin_src emacs-lisp
(defface elfeed-audio
  '((t :foreground "#FA0"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(podcast elfeed-audio) elfeed-search-face-alist)
#+end_src
***** Technology
#+begin_src emacs-lisp
(defface elfeed-reddit
  '((t :foreground "#0AA"))
  "Marks podcasts in Elfeed."
  :group 'elfeed)

(push '(tech elfeed-reddit) elfeed-search-face-alist)
#+end_src

***** Stars
#+begin_src emacs-lisp
  ;; face for starred articles
  (defface elfeed-search-starred-title-face
    '((t :foreground "#f77"))
    "Marks a starred Elfeed entry."
    :group 'elfeed)

  (push '(star elfeed-search-starred-title-face) elfeed-search-face-alist)
    #+end_src
    
**** Titles, See more titles and Let the computer read out the title ( Mac only)
#+begin_src emacs-lisp
(defun my/outline-show-full-title ()
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (message "%s" (propertize (elfeed-entry-title entry)))
))

(defun say (message)
  (call-process "say" nil nil nil message))

(defun my/elfeed-say ()
  (interactive)
  (let ((entry (elfeed-search-selected :single)))
    (say (elfeed-entry-title entry))))

#+end_src

**** In browser open URL
#+begin_src emacs-lisp
(defun my/elfeed-show-visit (&optional use-generic-p)
  "Visit the current entry in your browser using `browse-url'.
If there is a prefix argument, visit the current entry in the
browser defined by `browse-url-generic-program'."
  (interactive "P")
  (let ((link (elfeed-entry-link elfeed-show-entry)))
    (when link
      (message "Sent to browser: %s" link)
      (if use-generic-p
          (browse-url-generic link)
        (browse-web link)))))

#+end_src

*** EMMS Play enclosure
Play an enclosure
#+begin_src emacs-lisp
(defun my/elfeed-outline-show-play-enclosure ()
  "Add enclosure number ENCLOSURE-INDEX from current entry using EMMS."
  (interactive)
  (elfeed-search-untag-all-unread)
  (let ((entry (elfeed-search-selected :single)))
  (setq url-enclosure (car (elt (elfeed-entry-enclosures entry) 0))))
  (emms-add-url url-enclosure))
#+end_src

Play a url at point using mpv
#+begin_src emacs-lisp
  (defun my/play-region (start end)
      "Visit the current entry in mpv."
      (interactive "r")
      (let ((link (if (use-region-p) 
                      (buffer-substring start end))))
            (when link
              (message "Sent to mpv: %s" link)
              (my/launch-process "MPV" "*mpv-video*" "mpv" link))))

  (defun my/play-with-mpv ()
    "Visit the current entry in mpv."
    (interactive)
    (let ((link (url-get-url-at-point)))
          (when link
            (browse-using-mpv link))))

(defun browse-using-mpv (link &rest x)  
  (message "Sent to mpv: %s" link)
  (my/launch-process "ElfeedMPV" "*elfeed-video*" "mpv" link))
#+end_src

** IRC
Setup for managing IRC 
#+begin_src emacs-lisp
(setq erc-prompt-for-nickserv-password nil)
(defun my/connect-erc () 
(interactive)
(erc 
:server "irc.gotham.chat" :port "6667" :nick "translucentInk" :password nil ))
#+end_src

** Tor
#+begin_src emacs-lisp
  (defun my/launch-tor()
    (interactive)
    (message "Starting Tor sub-process.")
    (my/launch-process "tor-process" "*tor*" "tor")
    (message "Launching Firefox with proxy_profile")
    (my/launch-process "tor-process" "*tor*" "/Applications/Firefox.app/Contents/MacOS/firefox" "-P" "proxy_firefox" "--new-window" "https://check.torproject.org/")
    (message "Process launched in *tor* buffer."))
#+end_src

** EWW
Make EWW default
#+begin_src emacs-lisp
(setq browse-using-mpv "mpv")
(setq browse-url-browser-function '(("youtube.com" . browse-using-mpv)
          ("youtu.be" . browse-using-mpv)
          ("." . browse-url-generic)))
#+end_src

#+begin_src emacs-lisp
  (add-hook 'eww-mode-hook 'visual-line-mode)
  (add-hook 'eww-mode-hook 'toggle-word-wrap)
  (setq eww-header-line-format nil
        shr-width 80
        shr-use-fonts nil
        shr-color-visible-distance-min 10
        shr-color-visible-luminance-min 80)

#+end_src

*** Setup firefox
#+begin_src emacs-lisp
  (setq shr-external-browser 'browse-url-generic)
  (setq browse-url-generic-program "/Applications/Firefox.app/Contents/MacOS/firefox")
#+end_src

* Custom Configurations and Functions
** GIT
Magit and git-gutter configurations
#+begin_src emacs-lisp
(global-git-gutter+-mode t)
(setq git-gutter+-disabled-modes '(asm-mode image-mode))
(set-face-background 'git-gutter+-modified "purple") ;; background color
(set-face-foreground 'git-gutter+-added "green")
(set-face-foreground 'git-gutter+-deleted "red")
#+end_src

** Kill buffer
Kill buffer asks way too many questions on what to kill, and since I would want to kill what I am on 
#+begin_src emacs-lisp
(defun my/kill-this-buffer ()
  "Kill the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
#+end_src
** Windows and Frames
Have a easier navigation around open windows
#+begin_src emacs-lisp
(defun prev-window ()
  (interactive)
  (other-window -1))
#+end_src

Move line up and down
#+begin_src emacs-lisp
(defun my/move-line (dir)
  (interactive)
  (next-line)
  (transpose-lines dir)
  (previous-line))
#+end_src

** Basic Text editing
Duplicate an entire line
#+begin_src emacs-lisp
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
  (pop kill-ring)
  (move-beginning-of-line 1)
  )
#+end_src
** View Mode
Open Read-only files in view-mode by default
#+begin_src emacs-lisp
(setq view-read-only t)
#+end_src

View mode can be toggled by ~C-x C-q~.

Give Visual Cue using cursor while in view mode
#+begin_src emacs-lisp
(add-hook 'view-mode-hook
          (defun view-mode-hookee+ ()
            (setq cursor-type (if view-mode 'bar 'box))))

#+end_src
** Volume Control
Current Volume value 
#+begin_src emacs-lisp
(setq my/current-volume (volume-osascript-get))
#+end_src

Mute/UnMute and store current volume
#+begin_src emacs-lisp
  (defun my/volume-mute () 
    (setq my/current-volume (volume-osascript-get))
    (volume-osascript-set 0))

  (defun my/volume-unmute () 
    (volume-osascript-set  my/current-volume))
#+end_src

Increase/Decrease Volume
#+begin_src emacs-lisp
  (defun my/increase-volume (&optional arg) 
    (interactive "p")
    (if current-prefix-arg 
        (my/volume-unmute) (volume-osascript-nudge 1)))

  (defun my/decrease-volume (&optional arg) 
    (interactive "p")
    (if current-prefix-arg 
        (my/volume-mute) (volume-osascript-nudge -1)))
#+end_src

* Hydra
** GIT
#+begin_src emacs-lisp
(defhydra hydra-magit (:color blue)
  "
  ^
  ^Git  ^             ^Do^
  ^─────^─────────────^──^─────────────
  _n_ Next Hunk       _p_ Previous Hunk
  _w_ Show Hunk       _s_ Stage Hunk
  _q_ Quit            _b_ Blame
  _c_ Clone           _S_ Status
  _i_ Init            ^^
  "
  ("q" nil)
  ("n" git-gutter+-next-hunk)
  ("p" git-gutter+-previous-hunk)
  ("w" git-gutter+-show-hunk)
  ("s" git-gutter+-stage-hunks)
  ("b" magit-blame)
  ("c" magit-clone)
  ("i" magit-init)
  ("S" magit-status))
#+end_src

** Projectile
#+begin_src emacs-lisp
(defhydra hydra-projectile (:color blue)
  "
^
^Projectile^        ^Buffers^           ^Find^              ^Search^
^──────────^────────^───────^───────────^────^──────────────^──────^────────────
_q_ quit            _b_ list            _d_ directory       _r_ replace
_i_ reset cache     _K_ kill all        _D_ root            _R_ regexp replace
^^                  _S_ save all        _f_ file            _s_ ag
^^                  ^^                  _p_ project         ^^
^^                  ^^                  ^^                  ^^
"
  ("q" nil)
  ("b" helm-projectile-switch-to-buffer)
  ("d" helm-projectile-find-dir)
  ("D" projectile-dired)
  ("f" helm-projectile)
  ("i" projectile-invalidate-cache :color red)
  ("K" projectile-kill-buffers)
  ("p" helm-projectile-switch-project)
  ("r" projectile-replace)
  ("R" projectile-replace-regexp)
  ("s" helm-projectile-ag)
  ("S" projectile-save-project-buffers))
#+end_src

** Helm
#+begin_src emacs-lisp
(defhydra hydra-helm (:color blue)
  "
^
^Helm^              ^Browse^                ^Python^                    ^Org^                
^────^──────────────^──────^────────────────^──────^────────────────────^───^─────────────── 
_q_ quit            _i_ imenu               _c_ Conda Activate          _t_ Trello
_r_ resume          _s_ swoop               _d_ Conda Deactivate        _I_ Clock In
^^                  _S_ swoop all           _n_ Jupyter Notebooks       _O_ Clock Out
^^                  _k_ kill-ring           _p_ PyBuild
^^                  _b_ org brain           ^^
^^                  _m_ Mark Rings          ^^
^^                  ^^
"
  ("q" nil)
  ("r" helm-resume)
  ("i" helm-imenu)
  ("b" org-brain-visualize)
  ("m" helm-all-mark-rings)
  ("s" helm-swoop)
  ("S" helm-multi-swoop-all)
  ("k" helm-show-kill-ring)
  ("n" ein:notebooklist-open)
  ("c" pyvenv-workon)
  ("p" py-build)
  ("d" pyvenv-deactivate)
  ("t" hydra-org-trello/body)
  ("I" org-clock-in)
  ("O" org-clock-out))
#+end_src

** Org
*** org-ref
Org-ref Sugars
#+begin_src emacs-lisp
  (defhydra hydra-org-ref (:color blue)
    "
    ^
    ^Org-ref  ^               ^Do^                    ^Roam^                  
    ^─────^───────────────────^──^────────────────────^────^──────────────────
    _L_ Create label          _I_ Insert Reference    _r_ Org-Roam
    _b_ Add doi bibtex        _y_ Bibtex Yank         _f_ Roam Find Files 
    _A_ Add arxiv bibtex      _a_ Arxiv Search        _i_ Insert Link reference
    _q_ Quit                  ^^                      _c_ Create New Note      
    ^^                        ^^                      _d_ Deft
    ^^                        ^^                      _s_ Org-roam Server
    "
    ("q" nil)
    ("r" org-roam)
    ("f" org-roam-find-file)
    ("i" org-roam-insert)
    ("c" org-roam-capture)
    ("d" deft)
    ("s" my/launch-org-roam-firefox)
    ("L" org-ref-helm-insert-label-link) 
    ("I" org-ref-helm-insert-ref-link)
    ("b" doi-add-bibtex-entry)
    ("A" arxiv-add-bibtex-entry)
    ("a" arxiv-lookup)
    ("y" org-bibtex-yank))
#+end_src

*** org-trello
Hydra bindings for org-trello
#+begin_src emacs-lisp
(defhydra hydra-org-trello (:color blue)
  "
  ^Metadata ^                   ^Board^                        ^Card^
  ^─────────^───────────────────^────^─────────────────────────^────^─────────────
  _i_ Install Board Metadata    _s_ Sync Buffer                _c_ Sync Card
  _u_ Update Board Metadata     _J_ Open Board in Browser      _j_ Open card in browser
  _q_ Quit                      _l_ Show board labels          _a_ Signup on Card
  ^^                            ^^                             _C_ Add Comment on Card
  ^^                            ^^                             _D_ Delete Comment on Card

  "
  ("q" nil)
;; Board Metadata
  ("i" org-trello-install-board-metadata) 
  ("u" org-trello-update-board-metadata) 
;; Board
  ("s" org-trello-sync-buffer) 
  ("J" org-trello-jump-to-trello-board) 
  ("l" org-trello-show-board-labels) 
;; Card
  ("c" org-trello-sync-card) 
  ("j" org-trello-jump-to-trello-card) 
  ("a" org-trello-assign-me) 
  ("C" org-trello-add-card-comment) 
  ("D" org-trello-delete-card-commen))
#+end_src


** Music Player
Spotify sugars
#+begin_src emacs-lisp
(defhydra hydra-spotify (:color blue)
  "
  ^
  ^Spotify  ^             ^Do^
  ^────────^──────────────^──^─────────────
  _p_ Play/Pause          _N_ Next
  _s_ Stop                _P_ Previous
  _q_ Quit            
  "
  ("q" nil)
  ("p" spotify-playpause)
  ("N" spotify-next)
  ("P" spotify-previous)
  ("s" spotify-quit))
#+end_src

EMMS
#+begin_src emacs-lisp
(defhydra hydra-emms (:color blue)
  "
  ^
  ^  EMMS  ^              ^Do^
  ^────────^──────────────^──^─────────────
  _p_ Play/Pause          _N_ Next
  _s_ Stop                _P_ Previous
  _q_ Quit                _R_ Reload Playlist
  "
  ("q" nil)
  ("R" my/reload-playlist)
  ("p" emms-pause)
  ("N" emms-next)
  ("P" emms-previous)
  ("s" emms-stop))
#+end_src

** Internet, Social, Feed Manager
Hydra Menu for elfeed and twitter
#+begin_src emacs-lisp
(defhydra hydra-social-feed (:color blue)
  "
  ^
  ^Internet^       ^Social^     
  ^────────^───────^──────^─────
  _p_ Tor          _e_ El Feed
  _b_ EWW          _i_ IRC
  _q_ Quit            
  "
  ("q" nil)
  ("e" elfeed)
  ("b" browse-web)
  ("i" my/connect-erc)
  ("p" my/launch-tor))
#+end_src

** Window Move
Quickly move around windows
#+begin_src emacs-lisp
(defhydra hydra-window-move (:color blue)
  "
  ^
  ^Window  ^              
  ^────────^───────────^─────^─────────────
  _p_ Move Up          _n_ Move Down
  _b_ Move Left        _f_ Move Right
  _q_ Quit            
  "
  ("q" nil)
  ("p" windmove-up)
  ("n" windmove-down)
  ("b" windmove-left)
  ("f" windmove-right))
#+end_src

* Key Bindings
Define custom key bindings.
** Windows and Frames
Basic key bindings to play around with frames and window. Binding Delete frame defaulted at  =C-x 5 0= to =C-x w=

|----------------+--------------|
| Action         | Key Binding  |
|----------------+--------------|
| Delete Frame   | =C-x w=        |
| Increase Font  | =C-+=, =C-x C-== |
| Decrease Font  | =C--=          |
| Forward Window | =s->=, =s-'=     |
| Prev Window    | =s-<=          |
|----------------+--------------|


#+begin_src emacs-lisp
(global-set-key (kbd "C-x w") 'delete-frame)
(global-set-key (kbd "C-x C-b") 'switch-to-buffer)
(global-set-key (kbd "C-x C-d") 'dired)
(global-set-key (kbd "s-<return>") 'toggle-frame-fullscreen)
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "s->") #'other-window)
(global-set-key (kbd "s-'") #'other-window)
(global-set-key (kbd "s-<") #'prev-window)
#+end_src

Scroll Without moving point

#+begin_src emacs-lisp
(global-set-key (kbd "M-n") 'smartscan-symbol-go-forward)
(global-set-key (kbd "M-p") 'smartscan-symbol-go-backward)
#+end_src

Move line up and down
#+begin_src emacs-lisp
(global-set-key (kbd "M-<up>") (lambda () (interactive) (my/move-line -1)))
(global-set-key (kbd "M-<down>") (lambda () (interactive) (my/move-line 1)))
#+end_src

*** Shell
Have a Doom styled console launch binding
#+begin_src emacs-lisp
  ;; (global-set-key (kbd "s-`") 'vterm)
  (global-set-key (kbd "s-`") (lambda () (interactive) (eshell 'N)))
#+end_src

** Basic Text editing

Duplicate a line
#+begin_src emacs-lisp
(global-set-key (kbd "C-c d") 'duplicate-line)
#+end_src

Mark occurrences ( Rudimentary version of iedit)
#+begin_src emacs-lisp
(global-set-key (kbd "C->") 'mc/mark-next-like-this)
(global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
(global-set-key (kbd "C-s-<mouse-1>") 'mc/add-cursor-on-click)
#+end_src

Expand Region
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'er/expand-region)
#+end_src

Track the last edited location
#+begin_src emacs-lisp
(global-set-key (kbd "M-s-<left>") 'goto-last-change)
(global-set-key (kbd "M-s-<right>") 'goto-last-change-reverse)
#+end_src

Define word at point 
#+begin_src emacs-lisp
(global-set-key (kbd "M-#") 'lookup-word)
#+end_src

Push point to mark ring
#+begin_src emacs-lisp
(global-set-key (kbd "C-`") 'push-mark-no-activate)
#+end_src

** GIT
Git key bindings, with added sugar of hydra
#+begin_src emacs-lisp
(global-set-key (kbd "C-c g") 'magit-status)
(global-set-key (kbd "C-c m") 'hydra-magit/body)
#+end_src

** Projectile
#+begin_src emacs-lisp
(global-set-key (kbd "C-c p") 'hydra-projectile/body)
#+end_src

** Kill buffer
Just kill the current buffer without asking too many questions
#+begin_src emacs-lisp
(global-set-key (kbd "C-x k") 'my/kill-this-buffer)
#+end_src

** Helm
Have helm handle most of the things around

#+begin_src emacs-lisp
  (global-set-key (kbd "M-x") #'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x r b") #'helm-filtered-bookmarks)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (global-set-key (kbd "C-c h") 'hydra-helm/body)
  (global-set-key (kbd "C-x p") 'my/helm-bibtex-publications)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (define-key dired-mode-map  (kbd "C-x C-q") 'wdired-change-to-wdired-mode)
#+end_src

** Org
References, Publications and Citations
#+begin_src emacs-lisp
(setq org-ref-insert-cite-key "C-c M-]")
#+end_src

Links agendas and capture templates
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c A") 'cfw:open-org-calendar)
  (global-set-key (kbd "C-c c") 'org-capture)
#+end_src

Org-ref hydra sugar
#+begin_src emacs-lisp
(global-set-key (kbd "C-c r") 'hydra-org-ref/body)
#+end_src

Org-brain
#+begin_src emacs-lisp
 (define-key org-mode-map (kbd "C-c b") 'org-brain-visualize)
#+end_src

Updating =org-noter-set-doc-split-fraction= in-order to split window with a specific ratio every time org-noter launches. Existing function is kept same, except for the split ratio
#+begin_src emacs-lisp
  (setq org-noter-doc-split-ratio '(0.8 .0.5))

  (defun my/org-noter (&optional args)
      (interactive)
      (org-entry-put nil org-noter--property-doc-split-fraction (format "%s" org-noter-doc-split-ratio))
      (org-noter))
#+end_src

PDF View
#+begin_src emacs-lisp
(define-key pdf-view-mode-map (kbd "j") 'pdf-view-next-line-or-next-page)
(define-key pdf-view-mode-map (kbd "k") 'pdf-view-previous-line-or-previous-page)
(define-key pdf-view-mode-map (kbd "l") 'image-forward-hscroll)
(define-key pdf-view-mode-map (kbd "h") 'image-backward-hscroll)
(define-key pdf-view-mode-map (kbd "C-c C-d") 'pdf-view-midnight-minor-mode)
(define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
(define-key org-mode-map (kbd "C-c i") 'my/org-noter)
#+end_src

** Audio / Multimedia
Music Player
#+begin_src emacs-lisp
(global-set-key (kbd "C-c s") 'hydra-emms/body)
(global-set-key (kbd "C-c S") 'hydra-spotify/body)
#+end_src

|-----------------+-------------|
| Volume Control  | Key Binding |
|-----------------+-------------|
| Increase volume | =s-+=       |
| Decrease Volume | =s--=       |
| Mute Volume     | =C-u s--=   |
| Un Mute Volume  | =C-u s-+=   |
|-----------------+-------------|

#+begin_src emacs-lisp
(global-set-key (kbd "s-+") 'my/increase-volume)
(global-set-key (kbd "s-=") 'my/increase-volume)
(global-set-key (kbd "s--") 'my/decrease-volume)
#+end_src

** Json
Pretty print JSON buffer
#+begin_src emacs-lisp
(define-key json-mode-map (kbd "C-M-/") 'json-pretty-print-buffer)
#+end_src
** Python
Pytest keybinding in python mode
#+begin_src emacs-lisp
(define-key python-mode-map (kbd "C-c t") 'python-pytest-popup)
(define-key elpy-mode-map (kbd "C-c C-t") 'python-pytest-file)
#+end_src

#+RESULTS:
: python-pytest-file

** Password Manager
#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c C-p C-g") 'password-generator-phonetic)
(define-key org-mode-map (kbd "C-c C-p C-p") 'org-get-pin)
#+end_src
** EWW / Social Feed
#+begin_src emacs-lisp
(global-set-key (kbd "C-c f") 'hydra-social-feed/body)
(global-set-key (kbd "C-c O") 'my/play-with-mpv)
#+end_src

Custom open links at point
#+begin_src emacs-lisp
(define-key elfeed-show-mode-map (kbd "o") 'my/elfeed-show-visit)
#+end_src

#+begin_src emacs-lisp
  (define-key eww-mode-map "j" 'next-line)
  (define-key eww-mode-map "k" 'previous-line)
#+end_src

*** Elfeed bookmarks and custom keymaps

#+begin_src emacs-lisp
(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
              ("A" . my/elfeed-outline-show-all)
              ("M" . my/elfeed-outline-art-and-music)
              ("D" . my/elfeed-outline-show-daily)
              ("T" . my/elfeed-outline-show-tech)
              ("P" . my/elfeed-outline-show-podcast)
              (">" . my/elfeed-outline-show-play-enclosure)
              ("x" . my/elfeed-say)
              ("*" . elfeed-toggle-star)
              ("<SPC>" . my/outline-show-full-title)))
#+end_src

** View Mode
Disable view-mode using ~e~  (=view-exit=)

Remap movement keys to ~b~, ~f~, ~n~ and ~p~
#+begin_src emacs-lisp
(define-key view-mode-map (kbd "b") 'backward-char)
(define-key view-mode-map (kbd "f") 'forward-char)
(define-key view-mode-map (kbd "n") 'next-line)
(define-key view-mode-map (kbd "p") 'previous-line)
#+end_src

Also add basic vim key bindings:  ~h~, ~l~, ~j~ and ~k~

#+begin_src emacs-lisp
(define-key view-mode-map (kbd "h") 'backward-char)
(define-key view-mode-map (kbd "l") 'forward-char)
(define-key view-mode-map (kbd "j") 'next-line)
(define-key view-mode-map (kbd "k") 'previous-line)
#+end_src

Remap scroll screen and previous screen to ~v~ and ~V~
#+begin_src emacs-lisp
(define-key view-mode-map (kbd "v") 'scroll-up-command)
(define-key view-mode-map (kbd "V") 'scroll-down-command)
#+end_src

Remap recenter-top-bottom ~l~
#+begin_src emacs-lisp
; (define-key view-mode-map (kbd "l") 'recenter-top-bottom)
#+end_src

** Jupyter Notebooks
Create a new Notebook
#+begin_src emacs-lisp
(define-key ein:notebooklist-mode-map (kbd "C-c C-n") 'ein:notebooklist-new-notebook)
#+end_src

Execute all cells
#+begin_src emacs-lisp
(define-key ein:notebook-mode-map (kbd "C-c C-e") 'ein:worksheet-execute-all-cell)
#+end_src
